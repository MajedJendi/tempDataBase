{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyBGMpj3dv6hZUWLDEAoI3vlfnKMTG8ugIE\");\nGeocode.enableDebug();\n\nvar Map =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Map, _React$Component);\n\n  function Map(props) {\n    var _this;\n\n    _classCallCheck(this, Map);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Map).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"getCity\", function (addressArray) {\n      var city = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getArea\", function (addressArray) {\n      var area = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (var j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getState\", function (addressArray) {\n      var state = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        for (var _i = 0; _i < addressArray.length; _i++) {\n          if (addressArray[_i].types[0] && 'administrative_area_level_1' === addressArray[_i].types[0]) {\n            state = addressArray[_i].long_name;\n            return state;\n          }\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onInfoWindowClose\", function (event) {});\n\n    _defineProperty(_assertThisInitialized(_this), \"onPlaceSelected\", function (place) {\n      var address = place.formatted_address,\n          addressArray = place.address_components,\n          city = _this.getCity(addressArray),\n          area = _this.getArea(addressArray),\n          state = _this.getState(addressArray),\n          latValue = place.geometry.location.lat(),\n          lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n\n      _this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMarkerDragEnd\", function (event) {\n      console.log('event', event);\n      var newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      Geocode.fromLatLng(newLat, newLng).then(function (response) {\n        var address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = _this.getCity(addressArray),\n            area = _this.getArea(addressArray),\n            state = _this.getState(addressArray);\n\n        _this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : ''\n        });\n      }, function (error) {\n        console.error(error);\n      });\n    });\n\n    _this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: _this.props.center.lat,\n        lng: _this.props.center.lng\n      },\n      markerPosition: {\n        lat: _this.props.center.lat,\n        lng: _this.props.center.lng\n      }\n    };\n    return _this;\n  }\n  /**\r\n    * Get the current address from the default map position and set those values in the state\r\n    */\n\n\n  _createClass(Map, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(function (response) {\n        var address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = _this2.getCity(addressArray),\n            area = _this2.getArea(addressArray),\n            state = _this2.getState(addressArray);\n\n        console.log('city', city, area, state);\n\n        _this2.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : ''\n        });\n      }, function (error) {\n        console.error(error);\n      });\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n\n    /**\r\n      * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n      *\r\n      * @param nextProps\r\n      * @param nextState\r\n      * @return {boolean}\r\n      */\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n        return true;\n      } else if (this.props.center.lat === nextProps.center.lat) {\n        return false;\n      }\n    }\n    /**\r\n      * Get the city and set the city input value to the one selected\r\n      *\r\n      * @param addressArray\r\n      * @return {string}\r\n      */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var AsyncMap = withScriptjs(withGoogleMap(function (props) {\n        return React.createElement(GoogleMap, {\n          google: _this3.props.google,\n          defaultZoom: _this3.props.zoom,\n          defaultCenter: {\n            lat: _this3.state.mapPosition.lat,\n            lng: _this3.state.mapPosition.lng\n          }\n        }, React.createElement(Autocomplete, {\n          style: {\n            width: '100%',\n            height: '40px',\n            paddingLeft: '16px',\n            marginTop: '2px',\n            marginBottom: '100px'\n          },\n          onPlaceSelected: _this3.onPlaceSelected,\n          types: ['(regions)']\n        }), React.createElement(Marker, {\n          google: _this3.props.google,\n          name: 'Dolores park',\n          draggable: true,\n          onDragEnd: _this3.onMarkerDragEnd,\n          position: {\n            lat: _this3.state.markerPosition.lat,\n            lng: _this3.state.markerPosition.lng\n          }\n        }), React.createElement(Marker, null), React.createElement(InfoWindow, {\n          onClose: _this3.onInfoWindowClose,\n          position: {\n            lat: _this3.state.markerPosition.lat + 0.0018,\n            lng: _this3.state.markerPosition.lng\n          }\n        }, React.createElement(\"div\", null, React.createElement(\"span\", {\n          style: {\n            padding: 0,\n            margin: 0\n          }\n        }, _this3.state.address))));\n      }));\n      var map;\n\n      if (this.props.center.lat !== undefined) {\n        map = React.createElement(\"div\", null, React.createElement(\"div\", null, React.createElement(\"div\", {\n          className: \"form-group\"\n        }, React.createElement(\"label\", {\n          htmlFor: \"\"\n        }, \"City\"), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"city\",\n          className: \"form-control\",\n          onChange: this.onChange,\n          readOnly: \"readOnly\",\n          value: this.state.city\n        })), React.createElement(\"div\", {\n          className: \"form-group\"\n        }, React.createElement(\"label\", {\n          htmlFor: \"\"\n        }, \"Area\"), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"area\",\n          className: \"form-control\",\n          onChange: this.onChange,\n          readOnly: \"readOnly\",\n          value: this.state.area\n        })), React.createElement(\"div\", {\n          className: \"form-group\"\n        }, React.createElement(\"label\", {\n          htmlFor: \"\"\n        }, \"State\"), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"state\",\n          className: \"form-control\",\n          onChange: this.onChange,\n          readOnly: \"readOnly\",\n          value: this.state.state\n        })), React.createElement(\"div\", {\n          className: \"form-group\"\n        }, React.createElement(\"label\", {\n          htmlFor: \"\"\n        }, \"Address\"), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"address\",\n          className: \"form-control\",\n          onChange: this.onChange,\n          readOnly: \"readOnly\",\n          value: this.state.address\n        }))), React.createElement(AsyncMap, {\n          googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBGMpj3dv6hZUWLDEAoI3vlfnKMTG8ugIE&libraries=places\",\n          loadingElement: React.createElement(\"div\", {\n            style: {\n              height: \"100%\"\n            }\n          }),\n          containerElement: React.createElement(\"div\", {\n            style: {\n              height: this.props.height\n            }\n          }),\n          mapElement: React.createElement(\"div\", {\n            style: {\n              height: \"100%\"\n            }\n          })\n        }));\n      } else {\n        map = React.createElement(\"div\", {\n          style: {\n            height: this.props.height\n          }\n        });\n      }\n\n      return map;\n    }\n  }]);\n\n  return Map;\n}(React.Component);\n\nexport default Map;","map":{"version":3,"sources":["C:\\Users\\majed\\eclipse-workspace\\HopSpot\\testingRESTfulAPI\\components\\Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Autocomplete","Geocode","setApiKey","enableDebug","Map","props","addressArray","city","i","length","types","long_name","area","j","state","event","setState","target","name","value","place","address","formatted_address","address_components","getCity","getArea","getState","latValue","geometry","location","lat","lngValue","lng","markerPosition","mapPosition","console","log","newLat","latLng","newLng","fromLatLng","then","response","results","error","center","nextProps","nextState","AsyncMap","google","zoom","width","height","paddingLeft","marginTop","marginBottom","onPlaceSelected","onMarkerDragEnd","onInfoWindowClose","padding","margin","map","undefined","onChange","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\r\nimport Autocomplete from 'react-google-autocomplete';\r\nimport Geocode from \"react-geocode\";\r\nGeocode.setApiKey(\"AIzaSyBGMpj3dv6hZUWLDEAoI3vlfnKMTG8ugIE\");\r\nGeocode.enableDebug();\r\nclass Map extends React.Component{\r\nconstructor( props ){\r\n  super( props );\r\n  this.state = {\r\n   address: '',\r\n   city: '',\r\n   area: '',\r\n   state: '',\r\n   mapPosition: {\r\n    lat: this.props.center.lat,\r\n    lng: this.props.center.lng\r\n   },\r\n   markerPosition: {\r\n    lat: this.props.center.lat,\r\n    lng: this.props.center.lng\r\n}\r\n  }\r\n }\r\n/**\r\n  * Get the current address from the default map position and set those values in the state\r\n  */\r\n componentDidMount() {\r\n  Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\r\n   response => {\r\n    const address = response.results[0].formatted_address,\r\n     addressArray =  response.results[0].address_components,\r\n     city = this.getCity( addressArray ),\r\n     area = this.getArea( addressArray ),\r\n     state = this.getState( addressArray );\r\n  \r\n    console.log( 'city', city, area, state );\r\n  \r\n    this.setState( {\r\n     address: ( address ) ? address : '',\r\n     area: ( area ) ? area : '',\r\n     city: ( city ) ? city : '',\r\n     state: ( state ) ? state : '',\r\n    } )\r\n   },\r\n   error => {\r\n    console.error(error);\r\n   }\r\n  );\r\n };\r\n/**\r\n  * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n  *\r\n  * @param nextProps\r\n  * @param nextState\r\n  * @return {boolean}\r\n  */\r\n shouldComponentUpdate( nextProps, nextState ){\r\n  if (\r\n   this.state.markerPosition.lat !== this.props.center.lat ||\r\n   this.state.address !== nextState.address ||\r\n   this.state.city !== nextState.city ||\r\n   this.state.area !== nextState.area ||\r\n   this.state.state !== nextState.state\r\n  ) {\r\n   return true\r\n  } else if ( this.props.center.lat === nextProps.center.lat ){\r\n   return false\r\n  }\r\n }\r\n/**\r\n  * Get the city and set the city input value to the one selected\r\n  *\r\n  * @param addressArray\r\n  * @return {string}\r\n  */\r\n getCity = ( addressArray ) => {\r\n  let city = '';\r\n  for( let i = 0; i < addressArray.length; i++ ) {\r\n   if ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\r\n    city = addressArray[ i ].long_name;\r\n    return city;\r\n   }\r\n  }\r\n };\r\n/**\r\n  * Get the area and set the area input value to the one selected\r\n  *\r\n  * @param addressArray\r\n  * @return {string}\r\n  */\r\n getArea = ( addressArray ) => {\r\n  let area = '';\r\n  for( let i = 0; i < addressArray.length; i++ ) {\r\n   if ( addressArray[ i ].types[0]  ) {\r\n    for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\r\n     if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\r\n      area = addressArray[ i ].long_name;\r\n      return area;\r\n     }\r\n    }\r\n   }\r\n  }\r\n };\r\n/**\r\n  * Get the address and set the address input value to the one selected\r\n  *\r\n  * @param addressArray\r\n  * @return {string}\r\n  */\r\n getState = ( addressArray ) => {\r\n  let state = '';\r\n  for( let i = 0; i < addressArray.length; i++ ) {\r\n   for( let i = 0; i < addressArray.length; i++ ) {\r\n    if ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\r\n     state = addressArray[ i ].long_name;\r\n     return state;\r\n    }\r\n   }\r\n  }\r\n };\r\n/**\r\n  * And function for city,state and address input\r\n  * @param event\r\n  */\r\n onChange = ( event ) => {\r\n  this.setState({ [event.target.name]: event.target.value });\r\n };\r\n/**\r\n  * This Event triggers when the marker window is closed\r\n  *\r\n  * @param event\r\n  */\r\n onInfoWindowClose = ( event ) => {\r\n};\r\n/**\r\n  * When the user types an address in the search box\r\n  * @param place\r\n  */\r\n onPlaceSelected = ( place ) => {\r\nconst address = place.formatted_address,\r\n   addressArray =  place.address_components,\r\n   city = this.getCity( addressArray ),\r\n   area = this.getArea( addressArray ),\r\n   state = this.getState( addressArray ),\r\n   latValue = place.geometry.location.lat(),\r\n   lngValue = place.geometry.location.lng();\r\n// Set these values in the state.\r\n  this.setState({\r\n   address: ( address ) ? address : '',\r\n   area: ( area ) ? area : '',\r\n   city: ( city ) ? city : '',\r\n   state: ( state ) ? state : '',\r\n   markerPosition: {\r\n    lat: latValue,\r\n    lng: lngValue\r\n   },\r\n   mapPosition: {\r\n    lat: latValue,\r\n    lng: lngValue\r\n   },\r\n  })\r\n };\r\n/**\r\n  * When the marker is dragged you get the lat and long using the functions available from event object.\r\n  * Use geocode to get the address, city, area and state from the lat and lng positions.\r\n  * And then set those values in the state.\r\n  *\r\n  * @param event\r\n  */\r\n onMarkerDragEnd = ( event ) => {\r\n  console.log( 'event', event );\r\n  let newLat = event.latLng.lat(),\r\n   newLng = event.latLng.lng(),\r\n   addressArray = [];\r\nGeocode.fromLatLng( newLat , newLng ).then(\r\n   response => {\r\n    const address = response.results[0].formatted_address,\r\n     addressArray =  response.results[0].address_components,\r\n     city = this.getCity( addressArray ),\r\n     area = this.getArea( addressArray ),\r\n     state = this.getState( addressArray );\r\nthis.setState( {\r\n     address: ( address ) ? address : '',\r\n     area: ( area ) ? area : '',\r\n     city: ( city ) ? city : '',\r\n     state: ( state ) ? state : ''\r\n    } )\r\n   },\r\n   error => {\r\n    console.error(error);\r\n   }\r\n  );\r\n };\r\nrender(){\r\nconst AsyncMap = withScriptjs(\r\n   withGoogleMap(\r\n    props => (\r\n     <GoogleMap google={this.props.google}\r\n      defaultZoom={this.props.zoom}\r\n      defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n     >\r\n      {/* For Auto complete Search Box */}\r\n      <Autocomplete\r\n       style={{\r\n        width: '100%',\r\n        height: '40px',\r\n        paddingLeft: '16px',\r\n        marginTop: '2px',\r\n        marginBottom: '100px'\r\n       }}\r\n       onPlaceSelected={ this.onPlaceSelected }\r\n       types={['(regions)']}\r\n      />\r\n{/*Marker*/}\r\n      <Marker google={this.props.google}\r\n       name={'Dolores park'}\r\n          draggable={true}\r\n          onDragEnd={ this.onMarkerDragEnd }\r\n             position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\r\n      />\r\n      <Marker />\r\n{/* InfoWindow on top of marker */}\r\n      <InfoWindow\r\n       onClose={this.onInfoWindowClose}\r\n       position={{ lat: ( this.state.markerPosition.lat + 0.0018 ), lng: this.state.markerPosition.lng }}\r\n      >\r\n       <div>\r\n        <span style={{ padding: 0, margin: 0 }}>{ this.state.address }</span>\r\n       </div>\r\n      </InfoWindow>\r\n</GoogleMap>\r\n)\r\n   )\r\n  );\r\nlet map;\r\n  if( this.props.center.lat !== undefined ) {\r\n   map = <div>\r\n     <div>\r\n      <div className=\"form-group\">\r\n       <label htmlFor=\"\">City</label>\r\n       <input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\r\n      </div>\r\n      <div className=\"form-group\">\r\n       <label htmlFor=\"\">Area</label>\r\n       <input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\r\n      </div>\r\n      <div className=\"form-group\">\r\n       <label htmlFor=\"\">State</label>\r\n       <input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\r\n      </div>\r\n      <div className=\"form-group\">\r\n       <label htmlFor=\"\">Address</label>\r\n       <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\r\n      </div>\r\n     </div>\r\n     \r\n     <AsyncMap\r\n      googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBGMpj3dv6hZUWLDEAoI3vlfnKMTG8ugIE&libraries=places\"\r\n      loadingElement={\r\n       <div style={{ height: `100%` }} />\r\n      }\r\n      containerElement={\r\n       <div style={{ height: this.props.height }} />\r\n      }\r\n      mapElement={\r\n       <div style={{ height: `100%` }} />\r\n      }\r\n     />\r\n    </div>\r\n} else {\r\n   map = <div style={{height: this.props.height}} />\r\n  }\r\n  return( map )\r\n }\r\n}\r\nexport default Map"]},"metadata":{},"sourceType":"module"}