{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React from \"react\"; // nodejs library that concatenates classes\n\nimport classNames from \"classnames\"; // nodejs library to set properties for components\n\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Button from \"@material-ui/core/Button\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Drawer from \"@material-ui/core/Drawer\"; // @material-ui/icons\n\nimport Menu from \"@material-ui/icons/Menu\"; // core components\n\nimport styles from \"../styles/material-kit-react/components/headerStyle.js\";\nvar useStyles = makeStyles(styles);\nexport default function Header(props) {\n  var _classNames;\n\n  var classes = useStyles();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      mobileOpen = _React$useState2[0],\n      setMobileOpen = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (props.changeColorOnScroll) {\n      window.addEventListener(\"scroll\", headerColorChange);\n    }\n\n    return function cleanup() {\n      if (props.changeColorOnScroll) {\n        window.removeEventListener(\"scroll\", headerColorChange);\n      }\n    };\n  });\n\n  var handleDrawerToggle = function handleDrawerToggle() {\n    setMobileOpen(!mobileOpen);\n  };\n\n  var headerColorChange = function headerColorChange() {\n    var color = props.color,\n        changeColorOnScroll = props.changeColorOnScroll;\n    var windowsScrollTop = window.pageYOffset;\n\n    if (windowsScrollTop > changeColorOnScroll.height) {\n      document.body.getElementsByTagName(\"header\")[0].classList.remove(classes[color]);\n      document.body.getElementsByTagName(\"header\")[0].classList.add(classes[changeColorOnScroll.color]);\n    } else {\n      document.body.getElementsByTagName(\"header\")[0].classList.add(classes[color]);\n      document.body.getElementsByTagName(\"header\")[0].classList.remove(classes[changeColorOnScroll.color]);\n    }\n  };\n\n  var color = props.color,\n      rightLinks = props.rightLinks,\n      leftLinks = props.leftLinks,\n      brand = props.brand,\n      fixed = props.fixed,\n      absolute = props.absolute;\n  var appBarClasses = classNames((_classNames = {}, _defineProperty(_classNames, classes.appBar, true), _defineProperty(_classNames, classes[color], color), _defineProperty(_classNames, classes.absolute, absolute), _defineProperty(_classNames, classes.fixed, fixed), _classNames));\n  var brandComponent = React.createElement(Button, {\n    className: classes.title\n  }, brand);\n  return React.createElement(AppBar, {\n    className: appBarClasses\n  }, React.createElement(Toolbar, {\n    className: classes.container\n  }, leftLinks !== undefined ? brandComponent : null, React.createElement(\"div\", {\n    className: classes.flex\n  }, leftLinks !== undefined ? React.createElement(Hidden, {\n    smDown: true,\n    implementation: \"css\"\n  }, leftLinks) : brandComponent), React.createElement(Hidden, {\n    smDown: true,\n    implementation: \"css\"\n  }, rightLinks), React.createElement(Hidden, {\n    mdUp: true\n  }, React.createElement(IconButton, {\n    color: \"inherit\",\n    \"aria-label\": \"open drawer\",\n    onClick: handleDrawerToggle\n  }, React.createElement(Menu, null)))), React.createElement(Hidden, {\n    mdUp: true,\n    implementation: \"js\"\n  }, React.createElement(Drawer, {\n    variant: \"temporary\",\n    anchor: \"right\",\n    open: mobileOpen,\n    classes: {\n      paper: classes.drawerPaper\n    },\n    onClose: handleDrawerToggle\n  }, React.createElement(\"div\", {\n    className: classes.appResponsive\n  }, leftLinks, rightLinks))));\n}\nHeader.defaultProp = {\n  color: \"white\"\n};","map":null,"metadata":{},"sourceType":"module"}