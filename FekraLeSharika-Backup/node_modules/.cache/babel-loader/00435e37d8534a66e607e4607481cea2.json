{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nimport Autosuggest from \"react-autosuggest\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport Error from \"./Error\";\nvar ValidationSchema = Yup.object().shape({\n  name: Yup.string().min(1, \"Too Short!\").max(255, \"Too Long!\").required(\"Required\"),\n  country: Yup.string().min(1, \"Too Short!\").max(255, \"Too Long!\").required(\"Required\"),\n  email: Yup.string().email(\"Must be an email address\").max(255, \"Too Long!\").required(\"Required\")\n});\n\nfunction isValidPostalCode(postalCode, country) {\n  var postalCodeRegex;\n\n  switch (country) {\n    case \"United States of America\":\n      postalCodeRegex = /^([0-9]{5})(?:[-\\s]*([0-9]{4}))?$/;\n      break;\n\n    case \"Canada\":\n      postalCodeRegex = /^([A-Z][0-9][A-Z])\\s*([0-9][A-Z][0-9])$/;\n      break;\n\n    default:\n      return true;\n  }\n\n  return postalCodeRegex.test(postalCode);\n}\n\nfunction postalCodeLabel(country) {\n  var postalCodeLabels = {\n    \"United States of America\": \"Zip Code\",\n    Canada: \"Postal Code\"\n  };\n  return postalCodeLabels[country] || \"Postal Code\";\n}\n\nfunction showPostalCode(country) {\n  return [\"United States of America\", \"Canada\"].includes(country);\n}\n\nexport default function FormikForm() {\n  return _FormikForm.apply(this, arguments);\n}\n\nfunction _FormikForm() {\n  _FormikForm = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var _React$useState, _React$useState2, country, setCountry, _React$useState3, _React$useState4, suggestions, setSuggestions;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _React$useState = React.useState(\"\"), _React$useState2 = _slicedToArray(_React$useState, 2), country = _React$useState2[0], setCountry = _React$useState2[1];\n            _React$useState3 = React.useState([]), _React$useState4 = _slicedToArray(_React$useState3, 2), suggestions = _React$useState4[0], setSuggestions = _React$useState4[1];\n            return _context2.abrupt(\"return\", React.createElement(Formik, {\n              initialValues: {\n                name: \"\",\n                email: \"\",\n                country: \"\",\n                postalCode: \"\"\n              },\n              validationSchema: ValidationSchema,\n              validate: function validate(values) {\n                var errors = {}; // Validate the Postal Code conditionally based on the chosen Country\n\n                if (!isValidPostalCode(values.postalCode, values.country)) {\n                  errors.postalCode = \"\".concat(postalCodeLabel(values.country), \" invalid\");\n                }\n\n                return errors;\n              },\n              onSubmit: function onSubmit(values, _ref) {\n                var setSubmitting = _ref.setSubmitting,\n                    resetForm = _ref.resetForm;\n                setSubmitting(true); //        setTimeout(() => {\n                //          alert(JSON.stringify(values, null, 2));\n                //          resetForm();\n                //          setCountry(\"\");\n                //          setSubmitting(false);\n                //        }, 500);\n\n                var headers = new Headers();\n                headers.append('Content-type', 'application/json');\n                var options = {\n                  method: 'POST',\n                  headers: headers,\n                  body: _JSON$stringify(values)\n                };\n                var options_temp = {\n                  method: 'GET',\n                  headers: headers\n                };\n                var req = new Request('http://localhost:3000/signup', options); //        const res = await fetch(request);\n                //        const status = await response.status;\n                //        \n                //        if (res.status == 201){\n                //        \tconsole.log(\"Returned success from server side\");\n                //            res.render(\"\");\n                //        }\n                //        \n              }\n            }, function (_ref2) {\n              var values = _ref2.values,\n                  errors = _ref2.errors,\n                  touched = _ref2.touched,\n                  handleChange = _ref2.handleChange,\n                  handleBlur = _ref2.handleBlur,\n                  handleSubmit = _ref2.handleSubmit,\n                  isSubmitting = _ref2.isSubmitting,\n                  setFieldValue = _ref2.setFieldValue;\n              return React.createElement(\"form\", {\n                onSubmit: handleSubmit\n              }, React.createElement(\"h2\", null, \"A Great Form\"), React.createElement(\"div\", {\n                className: \"input-row\"\n              }, React.createElement(\"label\", null, \"Name\"), React.createElement(\"input\", {\n                type: \"text\",\n                name: \"name\",\n                onChange: handleChange,\n                onBlur: handleBlur //value={values.name}\n                ,\n                className: touched.name && errors.name ? \"has-error\" : null\n              }), React.createElement(Error, {\n                touched: touched.name,\n                message: errors.name\n              })), React.createElement(\"div\", {\n                className: \"input-row\"\n              }, React.createElement(\"label\", null, \"Email\"), React.createElement(\"input\", {\n                type: \"text\",\n                name: \"email\",\n                onChange: handleChange,\n                onBlur: handleBlur,\n                value: values.email,\n                className: touched.email && errors.email ? \"has-error\" : null\n              }), React.createElement(Error, {\n                touched: touched.email,\n                message: errors.email\n              })), React.createElement(\"div\", {\n                className: \"input-row\"\n              }, React.createElement(\"label\", null, \"Country\"), React.createElement(Autosuggest, {\n                suggestions: suggestions,\n                onSuggestionsFetchRequested:\n                /*#__PURE__*/\n                function () {\n                  var _ref4 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee(_ref3) {\n                    var value, response;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            value = _ref3.value;\n\n                            if (value) {\n                              _context.next = 4;\n                              break;\n                            }\n\n                            setSuggestions([]);\n                            return _context.abrupt(\"return\");\n\n                          case 4:\n                            _context.prev = 4;\n                            _context.next = 7;\n                            return axios.get(\"https://restcountries.eu/rest/v2/name/\".concat(value));\n\n                          case 7:\n                            response = _context.sent;\n                            setSuggestions(response.data.map(function (row) {\n                              return {\n                                name: row.name,\n                                flag: row.flag\n                              };\n                            }));\n                            _context.next = 14;\n                            break;\n\n                          case 11:\n                            _context.prev = 11;\n                            _context.t0 = _context[\"catch\"](4);\n                            setSuggestions([]);\n\n                          case 14:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, null, [[4, 11]]);\n                  }));\n\n                  return function (_x) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }(),\n                onSuggestionsClearRequested: function onSuggestionsClearRequested() {\n                  setSuggestions([]);\n                },\n                getSuggestionValue: function getSuggestionValue(suggestion) {\n                  return suggestion.name;\n                },\n                renderSuggestion: function renderSuggestion(suggestion) {\n                  return React.createElement(\"div\", null, React.createElement(\"img\", {\n                    src: suggestion.flag,\n                    alt: suggestion.name,\n                    style: {\n                      width: \"25px\"\n                    }\n                  }), suggestion.name);\n                },\n                onSuggestionSelected: function onSuggestionSelected(event, _ref5) {\n                  var suggestion = _ref5.suggestion,\n                      method = _ref5.method;\n\n                  if (method === \"enter\") {\n                    event.preventDefault();\n                  }\n\n                  setCountry(suggestion.name);\n                  setFieldValue(\"country\", suggestion.name);\n                },\n                inputProps: {\n                  placeholder: \"Search for your country\",\n                  autoComplete: \"abcd\",\n                  value: country,\n                  name: \"country\",\n                  onChange: function onChange(_event, _ref6) {\n                    var newValue = _ref6.newValue;\n                    setCountry(newValue);\n                  },\n                  className: touched.country && errors.country ? \"has-error\" : null\n                }\n              }), React.createElement(Error, {\n                touched: touched.country,\n                message: errors.country\n              })), showPostalCode(values.country) ? React.createElement(\"div\", {\n                className: \"input-row\"\n              }, React.createElement(\"label\", null, postalCodeLabel(values.country)), React.createElement(\"input\", {\n                type: \"text\",\n                name: \"postalCode\",\n                onChange: handleChange,\n                onBlur: handleBlur //value={values.postalCode}\n                ,\n                className: touched.postalCode && errors.postalCode ? \"has-error\" : null\n              }), React.createElement(Error, {\n                touched: touched.postalCode,\n                message: errors.postalCode\n              })) : null, React.createElement(\"div\", {\n                className: \"input-row\"\n              }, React.createElement(\"button\", {\n                type: \"submit\",\n                disabled: isSubmitting\n              }, \"Submit\")));\n            }));\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _FormikForm.apply(this, arguments);\n}","map":{"version":3,"sources":["C:\\Users\\majed\\eclipse-workspace\\HopSpot\\testingRESTfulAPI\\components\\FormikForm.js"],"names":["React","Autosuggest","Formik","Yup","axios","Error","ValidationSchema","object","shape","name","string","min","max","required","country","email","isValidPostalCode","postalCode","postalCodeRegex","test","postalCodeLabel","postalCodeLabels","Canada","showPostalCode","includes","FormikForm","useState","setCountry","suggestions","setSuggestions","values","errors","setSubmitting","resetForm","headers","Headers","append","options","method","body","options_temp","req","Request","touched","handleChange","handleBlur","handleSubmit","isSubmitting","setFieldValue","value","get","response","data","map","row","flag","suggestion","width","event","preventDefault","placeholder","autoComplete","onChange","_event","newValue","className"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Autosuggest from \"react-autosuggest\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport axios from \"axios\";\r\nimport Error from \"./Error\";\r\n\r\nconst ValidationSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    .min(1, \"Too Short!\")\r\n    .max(255, \"Too Long!\")\r\n    .required(\"Required\"),\r\n  country: Yup.string()\r\n    .min(1, \"Too Short!\")\r\n    .max(255, \"Too Long!\")\r\n    .required(\"Required\"),\r\n  email: Yup.string()\r\n    .email(\"Must be an email address\")\r\n    .max(255, \"Too Long!\")\r\n    .required(\"Required\")\r\n});\r\n\r\nfunction isValidPostalCode(postalCode, country) {\r\n  let postalCodeRegex;\r\n\r\n  switch (country) {\r\n    case \"United States of America\":\r\n      postalCodeRegex = /^([0-9]{5})(?:[-\\s]*([0-9]{4}))?$/;\r\n      break;\r\n    case \"Canada\":\r\n      postalCodeRegex = /^([A-Z][0-9][A-Z])\\s*([0-9][A-Z][0-9])$/;\r\n      break;\r\n    default:\r\n      return true;\r\n  }\r\n  return postalCodeRegex.test(postalCode);\r\n}\r\n\r\nfunction postalCodeLabel(country) {\r\n  const postalCodeLabels = {\r\n    \"United States of America\": \"Zip Code\",\r\n    Canada: \"Postal Code\"\r\n  };\r\n  return postalCodeLabels[country] || \"Postal Code\";\r\n}\r\n\r\nfunction showPostalCode(country) {\r\n  return [\"United States of America\", \"Canada\"].includes(country);\r\n}\r\n\r\nexport default async function FormikForm() {\r\n  const [country, setCountry] = React.useState(\"\");\r\n  const [suggestions, setSuggestions] = React.useState([]);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n        email: \"\",\r\n        country: \"\",\r\n        postalCode: \"\"\r\n      }}\r\n      validationSchema={ValidationSchema}\r\n      validate={values => {\r\n        let errors = {};\r\n\r\n        // Validate the Postal Code conditionally based on the chosen Country\r\n        if (!isValidPostalCode(values.postalCode, values.country)) {\r\n          errors.postalCode = `${postalCodeLabel(values.country)} invalid`;\r\n        }\r\n\r\n        return errors;\r\n      }}\r\n      onSubmit={(values, { setSubmitting, resetForm }) => {\r\n        setSubmitting(true);\r\n\r\n//        setTimeout(() => {\r\n//          alert(JSON.stringify(values, null, 2));\r\n//          resetForm();\r\n//          setCountry(\"\");\r\n//          setSubmitting(false);\r\n//        }, 500);\r\n        \r\n        const headers = new Headers();\r\n        headers.append('Content-type', 'application/json');\r\n        \r\n        const options = { \r\n        \tmethod: 'POST',\r\n        \theaders,\r\n        \tbody: JSON.stringify(values),\r\n        };\r\n        \r\n        const options_temp = { \r\n            \tmethod: 'GET',\r\n            \theaders,\r\n            };\r\n        \r\n        const req = new Request('http://localhost:3000/signup', options);\r\n//        const res = await fetch(request);\r\n//        const status = await response.status;\r\n//        \r\n//        if (res.status == 201){\r\n//        \tconsole.log(\"Returned success from server side\");\r\n//            res.render(\"\");\r\n//        }\r\n//        \r\n        \r\n        \r\n      }}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        setFieldValue\r\n      }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <h2>A Great Form</h2>\r\n\r\n          <div className=\"input-row\">\r\n            <label>Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              //value={values.name}\r\n              className={touched.name && errors.name ? \"has-error\" : null}\r\n            />\r\n            <Error touched={touched.name} message={errors.name} />\r\n          </div>\r\n\r\n          <div className=\"input-row\">\r\n            <label>Email</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"email\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.email}\r\n              className={touched.email && errors.email ? \"has-error\" : null}\r\n            />\r\n            <Error touched={touched.email} message={errors.email} />\r\n          </div>\r\n\r\n          <div className=\"input-row\">\r\n            <label>Country</label>\r\n            <Autosuggest\r\n              suggestions={suggestions}\r\n              onSuggestionsFetchRequested={async ({ value }) => {\r\n                if (!value) {\r\n                  setSuggestions([]);\r\n                  return;\r\n                }\r\n\r\n                try {\r\n                  const response = await axios.get(\r\n                    `https://restcountries.eu/rest/v2/name/${value}`\r\n                  );\r\n\r\n                  setSuggestions(\r\n                    response.data.map(row => ({\r\n                      name: row.name,\r\n                      flag: row.flag\r\n                    }))\r\n                  );\r\n                } catch (e) {\r\n                  setSuggestions([]);\r\n                }\r\n              }}\r\n              onSuggestionsClearRequested={() => {\r\n                setSuggestions([]);\r\n              }}\r\n              getSuggestionValue={suggestion => suggestion.name}\r\n              renderSuggestion={suggestion => (\r\n                <div>\r\n                  <img\r\n                    src={suggestion.flag}\r\n                    alt={suggestion.name}\r\n                    style={{ width: \"25px\" }}\r\n                  />\r\n                  {suggestion.name}\r\n                </div>\r\n              )}\r\n              onSuggestionSelected={(event, { suggestion, method }) => {\r\n                if (method === \"enter\") {\r\n                  event.preventDefault();\r\n                }\r\n                setCountry(suggestion.name);\r\n                setFieldValue(\"country\", suggestion.name);\r\n              }}\r\n              inputProps={{\r\n                placeholder: \"Search for your country\",\r\n                autoComplete: \"abcd\",\r\n                value: country,\r\n                name: \"country\",\r\n                onChange: (_event, { newValue }) => {\r\n                  setCountry(newValue);\r\n                },\r\n                className:\r\n                  touched.country && errors.country ? \"has-error\" : null\r\n              }}\r\n            />\r\n            <Error touched={touched.country} message={errors.country} />\r\n          </div>\r\n\r\n          {showPostalCode(values.country) ? (\r\n            <div className=\"input-row\">\r\n              <label>{postalCodeLabel(values.country)}</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"postalCode\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                //value={values.postalCode}\r\n                className={\r\n                  touched.postalCode && errors.postalCode ? \"has-error\" : null\r\n                }\r\n              />\r\n              <Error touched={touched.postalCode} message={errors.postalCode} />\r\n            </div>\r\n          ) : null}\r\n\r\n          <div className=\"input-row\">\r\n            <button type=\"submit\" disabled={isSubmitting}>\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}