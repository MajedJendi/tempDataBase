{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nimport Autosuggest from \"react-autosuggest\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport Error from \"./Error\";\nvar ValidationSchema = Yup.object().shape({\n  password: Yup.string().min(1, \"Too Short!\").max(255, \"Too Long!\").required(\"Required\"),\n  email: Yup.string().email(\"Must be an email address\").max(255, \"Too Long!\").required(\"Required\"),\n  phone: Yup.string().min(10, \"Too Short!\").required(\"Required\"),\n  firsName: Yup.string().min(1, \"Too Short!\").max(255, \"Too Long!\").required(\"Required\"),\n  lastName: Yup.string().min(1, \"Too Short!\").max(255, \"Too Long!\").required(\"Required\")\n});\n\nfunction userReg(_x) {\n  return _userReg.apply(this, arguments);\n}\n\nfunction _userReg() {\n  _userReg = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(req) {\n    var res, status;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log('Trying to login rn');\n            _context.next = 3;\n            return fetch(req);\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.status;\n\n          case 6:\n            status = _context.sent;\n\n            if (res.status === 200) {\n              console.log(\"success\");\n              window.location.href = \"createListing?varid=\" + encodeURIComponent(res.json);\n            } else if (res.status === 409) {\n              console.log(\"Existing email\");\n              document.getElementById(\"regError\").innerHTML = \"You are already registered, would you like to sign in\"; //\treturn (<h2>wrong email or password</h2>);\n            } else if (res.status === 408) {\n              console.log(\"Existing phone number\");\n              document.getElementById(\"regError\").innerHTML = \"This phone number was already used\";\n            } else {\n              console.log(\"Other errors\");\n              document.getElementById(\"regError\").innerHTML = \"Other errors\";\n            }\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _userReg.apply(this, arguments);\n}\n\nfunction fetchAll(_x2) {\n  return _fetchAll.apply(this, arguments);\n}\n\nfunction _fetchAll() {\n  _fetchAll = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(req) {\n    var headers, options, res;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            headers = new Headers();\n            options = {\n              method: 'GET',\n              headers: headers,\n              mode: 'cors',\n              cache: 'default'\n            }; // const req = new Request('http://localhost:3000/users', options);\n\n            _context2.next = 4;\n            return fetch(req);\n\n          case 4:\n            res = _context2.sent;\n            _context2.next = 7;\n            return res.status;\n\n          case 7:\n            status = _context2.sent;\n\n            if (status === 200) {\n              console.log('successful login');\n            }\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fetchAll.apply(this, arguments);\n}\n\nexport default function signup() {\n  return React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    validationSchema: ValidationSchema,\n    validate: function validate(values) {\n      var errors = {};\n      return errors;\n    },\n    onSubmit: function onSubmit(values, _ref) {\n      var setSubmitting = _ref.setSubmitting,\n          resetForm = _ref.resetForm;\n      setSubmitting(true);\n      var headers = new Headers();\n      headers.append('Content-type', 'application/json');\n      var options = {\n        method: 'POST',\n        headers: headers,\n        body: _JSON$stringify(values)\n      };\n      var req = new Request('http://localhost:3000/users/login', options);\n      setTimeout(function () {\n        userReg(req);\n        resetForm();\n        setCountry(\"\");\n        setSubmitting(false);\n      }, 500);\n    }\n  }, function (_ref2) {\n    var values = _ref2.values,\n        errors = _ref2.errors,\n        touched = _ref2.touched,\n        handleChange = _ref2.handleChange,\n        handleBlur = _ref2.handleBlur,\n        handleSubmit = _ref2.handleSubmit,\n        isSubmitting = _ref2.isSubmitting,\n        setFieldValue = _ref2.setFieldValue;\n    return React.createElement(\"form\", {\n      onSubmit: handleSubmit\n    }, React.createElement(\"h2\", {\n      id: \"regError\"\n    }), React.createElement(\"div\", {\n      className: \"input-row\"\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"firstName\",\n      placeholder: \"First Name\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.firstName,\n      className: touched.firstName && errors.firstName ? \"has-error\" : null\n    }), React.createElement(Error, {\n      touched: touched.firstName,\n      message: errors.firstName\n    })), React.createElement(\"div\", {\n      className: \"input-row\"\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"lastName\",\n      placeholder: \"Last Name\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.lastName,\n      className: touched.lastName && errors.lastName ? \"has-error\" : null\n    }), React.createElement(Error, {\n      touched: touched.lastName,\n      message: errors.lastName\n    })), React.createElement(\"div\", {\n      className: \"input-row\"\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"email\",\n      placeholder: \"Email\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.email,\n      className: touched.email && errors.email ? \"has-error\" : null\n    }), React.createElement(Error, {\n      touched: touched.email,\n      message: errors.email\n    })), React.createElement(\"div\", {\n      className: \"input-row-password\"\n    }, React.createElement(\"h3\", {\n      id: \"input-row-password\"\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"password\",\n      placeholder: \"Password\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.password,\n      className: touched.password && errors.password ? \"has-error\" : null\n    }), React.createElement(Error, {\n      touched: touched.password,\n      message: errors.password\n    })), React.createElement(\"div\", {\n      className: \"input-row-password\"\n    }, React.createElement(\"h3\", {\n      id: \"input-row-password\"\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"phone\",\n      placeholder: \"Phone Number\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.phone,\n      className: touched.phone && errors.phone ? \"has-error\" : null\n    }), React.createElement(Error, {\n      touched: touched.password,\n      message: errors.password\n    })), React.createElement(\"div\", {\n      className: \"input-row\"\n    }, React.createElement(\"button\", {\n      type: \"submit\",\n      disabled: isSubmitting\n    }, \"Submit\")));\n  });\n}","map":{"version":3,"sources":["C:\\Users\\majed\\eclipse-workspace\\HopSpot\\testingRESTfulAPI\\components\\signup.js"],"names":["React","Autosuggest","Formik","Yup","axios","Error","ValidationSchema","object","shape","password","string","min","max","required","email","phone","firsName","lastName","userReg","req","console","log","fetch","res","status","window","location","href","encodeURIComponent","json","document","getElementById","innerHTML","fetchAll","headers","Headers","options","method","mode","cache","signup","values","errors","setSubmitting","resetForm","append","body","Request","setTimeout","setCountry","touched","handleChange","handleBlur","handleSubmit","isSubmitting","setFieldValue","firstName"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nimport Autosuggest from \"react-autosuggest\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport axios from \"axios\";\r\nimport Error from \"./Error\";\r\n\r\n\r\nconst ValidationSchema = Yup.object().shape({\r\n  password: Yup.string()\r\n    .min(1, \"Too Short!\")\r\n    .max(255, \"Too Long!\")\r\n    .required(\"Required\"),\r\n  email: Yup.string()\r\n    .email(\"Must be an email address\")\r\n    .max(255, \"Too Long!\")\r\n    .required(\"Required\"),\r\n   phone: Yup.string()\r\n    .min(10, \"Too Short!\")\r\n    .required(\"Required\"),\r\n  firsName: Yup.string()\r\n    .min(1, \"Too Short!\")\r\n    .max(255, \"Too Long!\")\r\n    .required(\"Required\"),\r\n  lastName: Yup.string()\r\n  .min(1, \"Too Short!\")\r\n  .max(255, \"Too Long!\")\r\n  .required(\"Required\")\r\n});\r\n\r\nasync function userReg(req) {\r\n  \tconsole.log('Trying to login rn');\r\n\t\r\n\tconst res = await fetch(req);\r\n\t\r\n\tconst status = await res.status;\r\n\t\r\n\tif (res.status === 200) {\r\n\t\tconsole.log(\"success\");\r\n\t\t\r\n\t\twindow.location.href=\"createListing?varid=\" + encodeURIComponent(res.json);\r\n\r\n\t\t\r\n\t} else if (res.status === 409) {\r\n\t\tconsole.log(\"Existing email\");\r\n  \t   \tdocument.getElementById(\"regError\").innerHTML = \"You are already registered, would you like to sign in\";\r\n\r\n\t//\treturn (<h2>wrong email or password</h2>);\r\n\t} else if (res.status === 408){\r\n\t\tconsole.log(\"Existing phone number\");\r\n  \t   \tdocument.getElementById(\"regError\").innerHTML = \"This phone number was already used\";\r\n\t} else {\r\n\t\tconsole.log(\"Other errors\");\r\n  \t   \tdocument.getElementById(\"regError\").innerHTML = \"Other errors\";\r\n\t}\r\n}\r\n\r\nasync function fetchAll(req){\r\n\r\n\r\n\tconst headers = new Headers();\r\n\t\r\n    const options = { \r\n    \tmethod: 'GET',\r\n\t    headers: headers,\r\n\t    mode: 'cors',\r\n\t    cache: 'default'\t\r\n    };\r\n        \r\n   // const req = new Request('http://localhost:3000/users', options);\r\n        \r\n    const res = await fetch(req);\r\n  \tstatus = await res.status;\r\n  \t\r\n  \tif(status === 200) {\r\n  \t\tconsole.log('successful login');\r\n  \t\t\r\n  \t}\r\n  \t\r\n}\r\n\r\nexport default function signup() {\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        email: \"\",\r\n        password: \"\",\r\n      }}\r\n      validationSchema={ValidationSchema}\r\n      validate={values => {\r\n        let errors = {};\r\n\r\n        return errors;\r\n      }}\r\n      onSubmit={(values, { setSubmitting, resetForm }) => {\r\n        setSubmitting(true);\r\n\r\n\r\n        \r\n        const headers = new Headers();\r\n        headers.append('Content-type', 'application/json');\r\n        \r\n        const options = { \r\n        \tmethod: 'POST',\r\n        \theaders,\r\n        \tbody: JSON.stringify(values),\r\n        };\r\n        \r\n        const req = new Request('http://localhost:3000/users/login', options);\r\n        \r\n        setTimeout(() => {\r\n            userReg(req);\r\n            resetForm();\r\n            setCountry(\"\");\r\n            setSubmitting(false);\r\n          }, 500);\r\n        \r\n        \r\n      }}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        setFieldValue\r\n      }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <h2 id = \"regError\"></h2>\r\n \r\n          <div className=\"input-row\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"firstName\"\r\n            placeholder=\"First Name\"\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            value={values.firstName}\r\n            className={touched.firstName && errors.firstName ? \"has-error\" : null}\r\n          />\r\n          <Error touched={touched.firstName} message={errors.firstName} />\r\n          </div>\r\n\r\n          <div className=\"input-row\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"lastName\"\r\n            placeholder=\"Last Name\"\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            value={values.lastName}\r\n            className={touched.lastName && errors.lastName ? \"has-error\" : null}\r\n          />\r\n          <Error touched={touched.lastName} message={errors.lastName} />\r\n\r\n          </div>\r\n\r\n          <div className=\"input-row\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"email\"\r\n              placeholder=\"Email\"\r\n\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.email}\r\n              className={touched.email && errors.email ? \"has-error\" : null}\r\n            />\r\n            <Error touched={touched.email} message={errors.email} />\r\n\r\n            </div>\r\n            \r\n            \r\n            \r\n            <div className=\"input-row-password\">\r\n            <h3 id = \"input-row-password\"></h3>\r\n              <input\r\n                type=\"text\"\r\n                name=\"password\"\r\n                placeholder=\"Password\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.password}\r\n                className={touched.password && errors.password ? \"has-error\" : null}\r\n              />\r\n              <Error touched={touched.password} message={errors.password} />\r\n              </div>\r\n              \r\n              \r\n             <div className=\"input-row-password\">\r\n              <h3 id = \"input-row-password\"></h3>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"phone\"\r\n                  placeholder=\"Phone Number\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.phone}\r\n                  className={touched.phone && errors.phone ? \"has-error\" : null}\r\n                />\r\n                <Error touched={touched.password} message={errors.password} />\r\n                </div>\r\n            \r\n          <div className=\"input-row\">\r\n            <button type=\"submit\" disabled={isSubmitting}>\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}