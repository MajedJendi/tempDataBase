{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport AddressSuggest from './AddressSuggest';\nimport AddressInput from './AddressInput';\nimport axios from 'axios';\nvar APP_ID_HERE = '22J3SILed62EhUVuYz95';\nvar APP_CODE_HERE = 'FGMNo4cZK4MGjvM-SU8ShA';\n\nvar AddressForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddressForm, _Component);\n\n  function AddressForm(props) {\n    var _this;\n\n    _classCallCheck(this, AddressForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddressForm).call(this, props));\n    _this.state = _this.getInitialState(); // User has entered something in the address bar\n\n    _this.onQuery = _this.onQuery.bind(_assertThisInitialized(_this)); // User has entered something in an address field\n\n    _this.onAddressChange = _this.onAddressChange.bind(_assertThisInitialized(_this)); // User has clicked the check button\n\n    _this.onCheck = _this.onCheck.bind(_assertThisInitialized(_this)); // User has clicked the clear button\n\n    _this.onClear = _this.onClear.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(AddressForm, [{\n    key: \"onQuery\",\n    value: function onQuery(evt) {\n      var query = evt.target.value;\n\n      if (!query.length > 0) {\n        this.setState(this.getInitialState());\n        return;\n      }\n\n      var self = this;\n      axios.get('https://autocomplete.geocoder.api.here.com/6.2/suggest.json', {\n        'params': {\n          'app_id': APP_ID_HERE,\n          'app_code': APP_CODE_HERE,\n          'query': query,\n          'maxresults': 1\n        }\n      }).then(function (response) {\n        if (response.data.suggestions.length > 0) {\n          var id = response.data.suggestions[0].locationId;\n          var address = response.data.suggestions[0].address;\n          self.setState({\n            'address': address,\n            'query': query,\n            'locationId': id\n          });\n        } else {\n          var state = self.getInitialState();\n          self.setState(state);\n        }\n      });\n    }\n  }, {\n    key: \"getInitialState\",\n    value: function getInitialState() {\n      return {\n        'address': {\n          'street': '',\n          'city': '',\n          'state': '',\n          'postalCode': '',\n          'country': ''\n        },\n        'query': '',\n        'locationId': '',\n        'isChecked': false,\n        'coords': {}\n      };\n    }\n  }, {\n    key: \"onClear\",\n    value: function onClear(evt) {\n      var state = this.getInitialState();\n      this.setState(state);\n    }\n  }, {\n    key: \"onAddressChange\",\n    value: function onAddressChange(evt) {\n      var id = evt.target.id;\n      var val = evt.target.value;\n      var state = this.state;\n      state.address[id] = val;\n      this.setState(state);\n    }\n  }, {\n    key: \"onCheck\",\n    value: function onCheck(evt) {\n      var params = {\n        'app_id': APP_ID_HERE,\n        'app_code': APP_CODE_HERE\n      };\n\n      if (this.state.locationId.length > 0) {\n        params['locationId'] = this.state.locationId;\n      } else {\n        params['searchtext'] = this.state.address.street + this.state.address.city + this.state.address.state + this.state.address.postalCode + this.state.address.country;\n      }\n\n      var self = this;\n      axios.get('https://geocoder.api.here.com/6.2/geocode.json', {\n        'params': params\n      }).then(function (response) {\n        var view = response.data.Response.View;\n\n        if (view.length > 0 && view[0].Result.length > 0) {\n          var location = view[0].Result[0].Location;\n          self.setState({\n            'isChecked': 'true',\n            'locationId': '',\n            'query': location.Address.Label,\n            'address': {\n              'street': location.Address.HouseNumber + ' ' + location.Address.Street,\n              'city': location.Address.City,\n              'state': location.Address.State,\n              'postalCode': location.Address.PostalCode,\n              'country': location.Address.Country\n            },\n            'coords': {\n              'lat': location.DisplayPosition.Latitude,\n              'lon': location.DisplayPosition.Longitude\n            }\n          });\n        } else {\n          self.setState();\n        }\n      }).catch(function (error) {\n        console.log('caught failed query');\n        self.setState({\n          'isChecked': true,\n          'coords': null\n        });\n      });\n    }\n  }, {\n    key: \"alert\",\n    value: function alert() {\n      if (!this.state.isChecked) {\n        return;\n      }\n\n      if (this.state.coords === null) {\n        return React.createElement(\"div\", {\n          className: \"alert alert-warning\",\n          role: \"alert\"\n        }, React.createElement(\"b\", null, \"Invalid.\"), \" The address is not recognized.\");\n      } else {\n        return React.createElement(\"div\", {\n          className: \"alert alert-success\",\n          role: \"alert\"\n        }, React.createElement(\"b\", null, \"Valid Address.\"), \"  Location is \", this.state.coords.lat, \", \", this.state.coords.lon, \".\");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var result = this.alert();\n      return React.createElement(\"div\", {\n        className: \"container\"\n      }, React.createElement(AddressSuggest, {\n        query: this.state.query,\n        onChange: this.onQuery\n      }), React.createElement(AddressInput, {\n        street: this.state.address.street,\n        city: this.state.address.city,\n        state: this.state.address.state,\n        postalCode: this.state.address.postalCode,\n        country: this.state.address.country,\n        onChange: this.onAddressChange\n      }), React.createElement(\"br\", null), result, React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        onClick: this.onCheck\n      }, \"Check\"), React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-outline-secondary\",\n        onClick: this.onClear\n      }, \"Clear\"));\n    }\n  }]);\n\n  return AddressForm;\n}(Component);\n\nexport default AddressForm;","map":{"version":3,"sources":["C:\\Users\\majed\\eclipse-workspace\\HopSpot\\testingRESTfulAPI\\components\\AddressForm.js"],"names":["React","Component","AddressSuggest","AddressInput","axios","APP_ID_HERE","APP_CODE_HERE","AddressForm","props","state","getInitialState","onQuery","bind","onAddressChange","onCheck","onClear","evt","query","target","value","length","setState","self","get","then","response","data","suggestions","id","locationId","address","val","params","street","city","postalCode","country","view","Response","View","Result","location","Location","Address","Label","HouseNumber","Street","City","State","PostalCode","Country","DisplayPosition","Latitude","Longitude","catch","error","console","log","isChecked","coords","lat","lon","result","alert"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport AddressSuggest from './AddressSuggest';\r\nimport AddressInput from './AddressInput';\r\nimport axios from 'axios';\r\n\r\nconst APP_ID_HERE = '22J3SILed62EhUVuYz95';\r\nconst APP_CODE_HERE = 'FGMNo4cZK4MGjvM-SU8ShA';\r\n\r\nclass AddressForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = this.getInitialState();\r\n\r\n    // User has entered something in the address bar\r\n    this.onQuery = this.onQuery.bind(this);\r\n    // User has entered something in an address field\r\n    this.onAddressChange = this.onAddressChange.bind(this);\r\n    // User has clicked the check button\r\n    this.onCheck = this.onCheck.bind(this);\r\n    // User has clicked the clear button\r\n    this.onClear = this.onClear.bind(this);\r\n  }\r\n\r\n  onQuery(evt) {\r\n    const query = evt.target.value;\r\n\r\n    if (!query.length > 0) {\r\n      this.setState(this.getInitialState());\r\n      return;\r\n    }\r\n\r\n    const self = this;\r\n    axios.get('https://autocomplete.geocoder.api.here.com/6.2/suggest.json',\r\n      {'params': {\r\n        'app_id': APP_ID_HERE,\r\n        'app_code': APP_CODE_HERE,\r\n        'query': query,\r\n        'maxresults': 1,\r\n      }}).then(function (response) {\r\n          if (response.data.suggestions.length > 0) {\r\n            const id = response.data.suggestions[0].locationId;\r\n            const address = response.data.suggestions[0].address;\r\n            self.setState({\r\n              'address' : address,\r\n              'query' : query,\r\n              'locationId': id\r\n            })\r\n          } else {\r\n            const state = self.getInitialState();\r\n            self.setState(state);\r\n          }\r\n      });\r\n  }\r\n\r\n  getInitialState() {\r\n    return {\r\n      'address': {\r\n        'street': '',\r\n        'city': '',\r\n        'state': '',\r\n        'postalCode': '',\r\n        'country': ''\r\n      },\r\n      'query': '',\r\n      'locationId': '',\r\n      'isChecked': false,\r\n      'coords': {}\r\n    }\r\n  }\r\n\r\n  onClear(evt) {\r\n    const state = this.getInitialState();\r\n    this.setState(state);\r\n  }\r\n\r\n  onAddressChange(evt) {\r\n    const id = evt.target.id\r\n    const val = evt.target.value\r\n\r\n    let state = this.state\r\n    state.address[id] = val;\r\n    this.setState(state);\r\n  }\r\n\r\n  onCheck(evt) {\r\n    let params = {\r\n        'app_id': APP_ID_HERE,\r\n        'app_code': APP_CODE_HERE,\r\n    }\r\n\r\n    if (this.state.locationId.length > 0) {\r\n      params['locationId'] = this.state.locationId;\r\n    } else {\r\n      params['searchtext'] = this.state.address.street\r\n        + this.state.address.city\r\n        + this.state.address.state\r\n        + this.state.address.postalCode\r\n        + this.state.address.country;\r\n    }\r\n\r\n    const self = this;\r\n    axios.get('https://geocoder.api.here.com/6.2/geocode.json',\r\n      {'params': params }\r\n      ).then(function (response) {\r\n        const view = response.data.Response.View\r\n        if (view.length > 0 && view[0].Result.length > 0) {\r\n          const location = view[0].Result[0].Location;\r\n\r\n          self.setState({\r\n            'isChecked': 'true',\r\n            'locationId': '',\r\n            'query': location.Address.Label,\r\n            'address': {\r\n              'street': location.Address.HouseNumber + ' ' + location.Address.Street,\r\n              'city': location.Address.City,\r\n              'state': location.Address.State,\r\n              'postalCode': location.Address.PostalCode,\r\n              'country': location.Address.Country\r\n            },\r\n            'coords': {\r\n              'lat': location.DisplayPosition.Latitude,\r\n              'lon': location.DisplayPosition.Longitude\r\n            }\r\n          });\r\n        } else {\r\n          self.setState(\r\n//            'isChecked': true,\r\n//            'coords': null,\r\n          )\r\n        }\r\n\r\n      })\r\n      .catch(function (error) {\r\n        console.log('caught failed query');\r\n        self.setState({\r\n          'isChecked': true,\r\n          'coords': null,\r\n        });\r\n      });\r\n  }\r\n\r\n  alert() {\r\n    if (!this.state.isChecked) {\r\n      return;\r\n    }\r\n\r\n    if (this.state.coords === null) {\r\n      return (\r\n        <div className=\"alert alert-warning\" role=\"alert\">\r\n          <b>Invalid.</b> The address is not recognized.\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"alert alert-success\" role=\"alert\">\r\n          <b>Valid Address.</b>  Location is {this.state.coords.lat}, {this.state.coords.lon}.\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let result = this.alert();\r\n    return (\r\n        <div className=\"container\">\r\n          <AddressSuggest\r\n            query={this.state.query}\r\n            onChange={this.onQuery}\r\n            />\r\n          <AddressInput\r\n            street={this.state.address.street}\r\n            city={this.state.address.city}\r\n            state={this.state.address.state}\r\n            postalCode={this.state.address.postalCode}\r\n            country={this.state.address.country}\r\n            onChange={this.onAddressChange}\r\n            />\r\n          <br/>\r\n          { result }\r\n          <button type=\"submit\" className=\"btn btn-primary\" onClick={this.onCheck}>Check</button>\r\n          <button type=\"submit\" className=\"btn btn-outline-secondary\" onClick={this.onClear}>Clear</button>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default AddressForm;"]},"metadata":{},"sourceType":"module"}