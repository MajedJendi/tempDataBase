{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nimport Autosuggest from \"react-autosuggest\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport Error from \"./Error\";\nvar ValidationSchema = Yup.object().shape({\n  password: Yup.string().min(1, \"Too Short!\").max(255, \"Too Long!\").required(\"Required\"),\n  email: Yup.string().email(\"Must be an email address\").max(255, \"Too Long!\").required(\"Required\")\n});\n\nfunction userLogin(_x) {\n  return _userLogin.apply(this, arguments);\n}\n\nfunction _userLogin() {\n  _userLogin = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(req) {\n    var res, status;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log('Trying to login rn at emailLogin');\n            _context.next = 3;\n            return fetch(req);\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.status;\n\n          case 6:\n            status = _context.sent;\n\n            if (res.status === 200) {\n              console.log(\"success\"); //window.location.href = \"book\";\n\n              window.location.href = \"loggedIn?varid=\" + encodeURIComponent(res.json);\n            } else if (res.status == 300) {\n              document.getElementById(\"input-row-password\").innerHTML = \"This email needs to be verified first before loggin in\";\n            } else {\n              document.getElementById(\"input-row-password\").innerHTML = \"Wrong email or password\";\n            }\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _userLogin.apply(this, arguments);\n}\n\nfunction fetchAll(_x2) {\n  return _fetchAll.apply(this, arguments);\n}\n\nfunction _fetchAll() {\n  _fetchAll = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(req) {\n    var headers, options, res;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            headers = new Headers();\n            options = {\n              method: 'GET',\n              headers: headers,\n              mode: 'cors',\n              cache: 'default'\n            }; // const req = new Request('http://localhost:3000/users', options);\n\n            _context2.next = 4;\n            return fetch(req);\n\n          case 4:\n            res = _context2.sent;\n            _context2.next = 7;\n            return res.status;\n\n          case 7:\n            status = _context2.sent;\n\n            if (status === 200) {\n              console.log('successful login');\n            }\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fetchAll.apply(this, arguments);\n}\n\nexport default function Login() {\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      country = _React$useState2[0],\n      setCountry = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      suggestions = _React$useState4[0],\n      setSuggestions = _React$useState4[1];\n\n  return React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    validationSchema: ValidationSchema,\n    validate: function validate(values) {\n      var errors = {};\n      return errors;\n    },\n    onSubmit: function onSubmit(values, _ref) {\n      var setSubmitting = _ref.setSubmitting,\n          resetForm = _ref.resetForm;\n      setSubmitting(true); //        setTimeout(() => {\n      //          alert(JSON.stringify(values, null, 2));\n      //          resetForm();\n      //          setCountry(\"\");\n      //          setSubmitting(false);\n      //        }, 500);\n\n      var headers = new Headers();\n      headers.append('Content-type', 'application/json');\n      var options = {\n        method: 'POST',\n        headers: headers,\n        body: _JSON$stringify(values)\n      };\n      var req = new Request('http://localhost:3000/users/login', options);\n      userLogin(req);\n    }\n  }, function (_ref2) {\n    var values = _ref2.values,\n        errors = _ref2.errors,\n        touched = _ref2.touched,\n        handleChange = _ref2.handleChange,\n        handleBlur = _ref2.handleBlur,\n        handleSubmit = _ref2.handleSubmit,\n        isSubmitting = _ref2.isSubmitting,\n        setFieldValue = _ref2.setFieldValue;\n    return React.createElement(\"form\", {\n      onSubmit: handleSubmit\n    }, React.createElement(\"h2\", null, \"A Great Form\"), React.createElement(\"div\", {\n      className: \"input-row\"\n    }, React.createElement(\"label\", null, \"Email\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"email\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.email,\n      className: touched.email && errors.email ? \"has-error\" : null\n    }), React.createElement(Error, {\n      touched: touched.email,\n      message: errors.email\n    })), React.createElement(\"div\", {\n      className: \"input-row-password\"\n    }, React.createElement(\"h3\", {\n      id: \"input-row-password\"\n    }), React.createElement(\"label\", null, \"password\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"password\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.password,\n      className: touched.password && errors.password ? \"has-error\" : null\n    }), React.createElement(Error, {\n      touched: touched.password,\n      message: errors.password\n    })), React.createElement(\"div\", {\n      className: \"input-row\"\n    }, React.createElement(\"button\", {\n      type: \"submit\",\n      disabled: isSubmitting\n    }, \"Submit\")));\n  });\n}","map":{"version":3,"sources":["C:\\Users\\majed\\eclipse-workspace\\HopSpot\\testingRESTfulAPI\\components\\emailLogin.js"],"names":["React","Autosuggest","Formik","Yup","axios","Error","ValidationSchema","object","shape","password","string","min","max","required","email","userLogin","req","console","log","fetch","res","status","window","location","href","encodeURIComponent","json","document","getElementById","innerHTML","fetchAll","headers","Headers","options","method","mode","cache","Login","useState","country","setCountry","suggestions","setSuggestions","values","errors","setSubmitting","resetForm","append","body","Request","touched","handleChange","handleBlur","handleSubmit","isSubmitting","setFieldValue"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\n\r\nimport Autosuggest from \"react-autosuggest\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport axios from \"axios\";\r\nimport Error from \"./Error\";\r\n\r\n\r\nconst ValidationSchema = Yup.object().shape({\r\n  password: Yup.string()\r\n    .min(1, \"Too Short!\")\r\n    .max(255, \"Too Long!\")\r\n    .required(\"Required\"),\r\n  email: Yup.string()\r\n    .email(\"Must be an email address\")\r\n    .max(255, \"Too Long!\")\r\n    .required(\"Required\")\r\n});\r\n\r\nasync function userLogin(req) {\r\n  \tconsole.log('Trying to login rn at emailLogin');\r\n\t\r\n\tconst res = await fetch(req);\r\n\t\r\n\tconst status = await res.status;\r\n\t\r\n\tif (res.status === 200) {\r\n\t\tconsole.log(\"success\");\r\n\t\t\r\n\t\t//window.location.href = \"book\";\r\n\t\twindow.location.href=\"loggedIn?varid=\" + encodeURIComponent(res.json);\r\n\t} else if (res.status == 300) {\r\n  \t   \tdocument.getElementById(\"input-row-password\").innerHTML = \"This email needs to be verified first before loggin in\";\r\n\t} else {\r\n  \t   \tdocument.getElementById(\"input-row-password\").innerHTML = \"Wrong email or password\" ;\r\n\t}\r\n}\r\n\r\nasync function fetchAll(req){\r\n\r\n\r\n\tconst headers = new Headers();\r\n\t\r\n    const options = { \r\n    \tmethod: 'GET',\r\n\t    headers: headers,\r\n\t    mode: 'cors',\r\n\t    cache: 'default'\t\r\n    };\r\n        \r\n   // const req = new Request('http://localhost:3000/users', options);\r\n        \r\n    const res = await fetch(req);\r\n  \tstatus = await res.status;\r\n  \t\r\n  \tif(status === 200) {\r\n  \t\tconsole.log('successful login');\r\n  \t}\r\n  \t\r\n}\r\n\r\nexport default function Login() {\r\n  const [country, setCountry] = React.useState(\"\");\r\n  const [suggestions, setSuggestions] = React.useState([]);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        email: \"\",\r\n        password: \"\",\r\n      }}\r\n      validationSchema={ValidationSchema}\r\n      validate={values => {\r\n        let errors = {};\r\n\r\n        return errors;\r\n      }}\r\n      onSubmit={(values, { setSubmitting, resetForm }) => {\r\n        setSubmitting(true);\r\n\r\n//        setTimeout(() => {\r\n//          alert(JSON.stringify(values, null, 2));\r\n//          resetForm();\r\n//          setCountry(\"\");\r\n//          setSubmitting(false);\r\n//        }, 500);\r\n        \r\n        const headers = new Headers();\r\n        headers.append('Content-type', 'application/json');\r\n        \r\n        const options = { \r\n        \tmethod: 'POST',\r\n        \theaders,\r\n        \tbody: JSON.stringify(values),\r\n        };\r\n        \r\n        const req = new Request('http://localhost:3000/users/login', options);\r\n        \r\n        userLogin(req);\r\n        \r\n      }}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        setFieldValue\r\n      }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <h2>A Great Form</h2>\r\n          \r\n          \r\n          <div className=\"input-row\">\r\n\t          <label>Email</label>\r\n\t\t          <input\r\n\t\t            type=\"text\"\r\n\t\t            name=\"email\"\r\n\t\t            onChange={handleChange}\r\n\t\t            onBlur={handleBlur}\r\n\t\t            value={values.email}\r\n\t\t            className={touched.email && errors.email ? \"has-error\" : null}\r\n\t\t          />\r\n\t          <Error touched={touched.email} message={errors.email} />\r\n         </div>\r\n          \r\n\r\n          <div className=\"input-row-password\">\r\n\t          <h3 id = \"input-row-password\"></h3>\r\n\t          <label>password</label>\r\n\t            <input\r\n\t              type=\"text\"\r\n\t              name=\"password\"\r\n\t              onChange={handleChange}\r\n\t              onBlur={handleBlur}\r\n\t              value={values.password}\r\n\t              className={touched.password && errors.password ? \"has-error\" : null}\r\n\t            />\r\n\t            <Error touched={touched.password} message={errors.password} />\r\n          </div>\r\n\r\n \r\n          <div className=\"input-row\">\r\n            <button type=\"submit\" disabled={isSubmitting}>\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}