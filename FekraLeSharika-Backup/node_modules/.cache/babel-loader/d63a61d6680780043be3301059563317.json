{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport AddressItem from './AddressSuggest';\nimport AddressInput from './AddressInput';\nimport React, { Component } from 'react';\n\nvar AddressForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddressForm, _Component);\n\n  function AddressForm(props) {\n    var _this;\n\n    _classCallCheck(this, AddressForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddressForm).call(this, props));\n\n    var address = _this.getEmptyAddress();\n\n    _this.state = {\n      'address': address,\n      'query': '',\n      'locationId': '' // User has entered something in address suggest field\n\n    };\n    _this.onQuery = _this.onQuery.bind(_assertThisInitialized(_this)); // User has entered something in address field\n\n    _this.onAddressChange = _this.onAddressChange.bind(_assertThisInitialized(_this)); // User has clicked the check button\n\n    _this.onCheck = _this.onCheck.bind(_assertThisInitialized(_this)); // User has clicked the clear button\n\n    _this.onClear = _this.onClear.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(AddressForm, [{\n    key: \"onQuery\",\n    value: function onQuery(evt) {\n      var query = evt.target.value;\n\n      if (!query.length > 0) {\n        var address = this.getEmptyAddress();\n        return this.setState({\n          'address': address,\n          'query': '',\n          'locationId': ''\n        });\n      }\n\n      var self = this;\n      axios.get('https://autocomplete.geocoder.api.here.com/6.2/suggest.json', {\n        'params': {\n          'app_id': APP_ID_HERE,\n          'app_code': APP_CODE_HERE,\n          'query': query,\n          'maxresults': 1\n        }\n      }).then(function (response) {\n        var address = response.data.suggestions[0].address;\n        var id = response.data.suggestions[0].locationId;\n        self.setState({\n          'address': address,\n          'query': query,\n          'locationId': id\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        class: \"container\"\n      }, React.createElement(AddressSuggest, {\n        query: this.state.query,\n        onChange: this.onQuery\n      }), React.createElement(AddressInput, {\n        street: this.state.address.street,\n        city: this.state.address.city,\n        state: this.state.address.state,\n        postalCode: this.state.address.postalCode,\n        country: this.state.address.country\n      }), result, React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        onClick: this.onCheck\n      }, \"Check\"), React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-outline-secondary\",\n        onClick: this.onClear\n      }, \"Clear\"));\n    }\n  }, {\n    key: \"onCheck\",\n    value: function onCheck(evt) {\n      var params = {\n        'app_id': APP_ID_HERE,\n        'app_code': APP_CODE_HERE\n      };\n\n      if (this.state.locationId.length > 0) {\n        params['locationId'] = this.state.locationId;\n      } else {\n        params['searchtext'] = this.state.address.street + this.state.address.city + this.state.address.state + this.state.address.postalCode + this.state.address.country;\n      }\n\n      var self = this;\n      axios.get('https://geocoder.api.here.com/6.2/geocode.json', {\n        'params': params\n      }).then(function (response) {\n        var view = response.data.Response.View;\n\n        if (view.length > 0 && view[0].Result.length > 0) {\n          var location = view[0].Result[0].Location;\n          self.setState({\n            'isChecked': 'true',\n            'coords': {\n              'lat': location.DisplayPosition.Latitude,\n              'lon': location.DisplayPosition.Longitude\n            },\n            'address': {\n              'street': location.Address.HouseNumber + ' ' + location.Address.Street,\n              'city': location.Address.City,\n              'state': location.Address.State,\n              'postalCode': location.Address.PostalCode,\n              'country': location.Address.Country\n            }\n          });\n        } else {\n          self.setState();\n        }\n      });\n    }\n  }]);\n\n  return AddressForm;\n}(Component);","map":null,"metadata":{},"sourceType":"module"}