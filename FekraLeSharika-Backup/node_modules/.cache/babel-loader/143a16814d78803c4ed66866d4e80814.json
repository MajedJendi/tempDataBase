{"ast":null,"code":"import _readOnlyError from \"@babel/runtime-corejs2/helpers/esm/readOnlyError\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nimport Autosuggest from \"react-autosuggest\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport Error from \"./Error\";\nvar ValidationSchema = Yup.object().shape({\n  name: Yup.string().min(1, \"Too Short!\").max(255, \"Too Long!\").required(\"Required\"),\n  country: Yup.string().min(1, \"Too Short!\").max(255, \"Too Long!\").required(\"Required\"),\n  email: Yup.string().email(\"Must be an email address\").max(255, \"Too Long!\").required(\"Required\")\n});\n\nfunction isValidPostalCode(postalCode, country) {\n  var postalCodeRegex;\n\n  switch (country) {\n    case \"United States of America\":\n      postalCodeRegex = /^([0-9]{5})(?:[-\\s]*([0-9]{4}))?$/;\n      break;\n\n    case \"Canada\":\n      postalCodeRegex = /^([A-Z][0-9][A-Z])\\s*([0-9][A-Z][0-9])$/;\n      break;\n\n    default:\n      return true;\n  }\n\n  return postalCodeRegex.test(postalCode);\n}\n\nfunction postalCodeLabel(country) {\n  var postalCodeLabels = {\n    \"United States of America\": \"Zip Code\",\n    Canada: \"Postal Code\"\n  };\n  return postalCodeLabels[country] || \"Postal Code\";\n}\n\nfunction showPostalCode(country) {\n  return [\"United States of America\", \"Canada\"].includes(country);\n}\n\nfunction fetchAll(_x) {\n  return _fetchAll.apply(this, arguments);\n}\n\nfunction _fetchAll() {\n  _fetchAll = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(req) {\n    var res, status;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(\"at fetchAll\");\n            _context2.next = 3;\n            return fetch(req);\n\n          case 3:\n            res = _context2.sent;\n            _context2.next = 6;\n            return res.status;\n\n          case 6:\n            status = _context2.sent;\n\n            if (!(res.status == 201)) {\n              _context2.next = 18;\n              break;\n            }\n\n            console.log(\"Returned success from server side\");\n\n            _readOnlyError(\"res\");\n\n            _context2.next = 12;\n            return fetch('http://localhost:3000/users');\n\n          case 12:\n            res = _context2.sent;\n\n            _readOnlyError(\"status\");\n\n            _context2.next = 16;\n            return res.status;\n\n          case 16:\n            status = _context2.sent;\n\n            if (status === 200) {}\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fetchAll.apply(this, arguments);\n}\n\nexport default function FormikForm() {\n  var _this = this;\n\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      country = _React$useState2[0],\n      setCountry = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      suggestions = _React$useState4[0],\n      setSuggestions = _React$useState4[1];\n\n  return React.createElement(Formik, {\n    initialValues: {\n      name: \"\",\n      email: \"\",\n      country: \"\",\n      postalCode: \"\"\n    },\n    validationSchema: ValidationSchema,\n    validate: function validate(values) {\n      var errors = {}; // Validate the Postal Code conditionally based on the chosen Country\n\n      if (!isValidPostalCode(values.postalCode, values.country)) {\n        errors.postalCode = \"\".concat(postalCodeLabel(values.country), \" invalid\");\n      }\n\n      return errors;\n    },\n    onSubmit: function onSubmit(values, _ref) {\n      var setSubmitting = _ref.setSubmitting,\n          resetForm = _ref.resetForm;\n      setSubmitting(true); //        setTimeout(() => {\n      //          alert(JSON.stringify(values, null, 2));\n      //          resetForm();\n      //          setCountry(\"\");\n      //          setSubmitting(false);\n      //        }, 500);\n\n      var headers = new Headers();\n      headers.append('Content-type', 'application/json');\n      var options = {\n        method: 'POST',\n        headers: headers,\n        body: _JSON$stringify(values)\n      };\n      var options_temp = {\n        method: 'GET',\n        headers: headers\n      };\n      var req = new Request('http://localhost:3000/signup', options);\n\n      _this.fetchAll(req);\n    }\n  }, function (_ref2) {\n    var values = _ref2.values,\n        errors = _ref2.errors,\n        touched = _ref2.touched,\n        handleChange = _ref2.handleChange,\n        handleBlur = _ref2.handleBlur,\n        handleSubmit = _ref2.handleSubmit,\n        isSubmitting = _ref2.isSubmitting,\n        setFieldValue = _ref2.setFieldValue;\n    return React.createElement(\"form\", {\n      onSubmit: handleSubmit\n    }, React.createElement(\"h2\", null, \"A Great Form\"), React.createElement(\"div\", {\n      className: \"input-row\"\n    }, React.createElement(\"label\", null, \"Name\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      onChange: handleChange,\n      onBlur: handleBlur //value={values.name}\n      ,\n      className: touched.name && errors.name ? \"has-error\" : null\n    }), React.createElement(Error, {\n      touched: touched.name,\n      message: errors.name\n    })), React.createElement(\"div\", {\n      className: \"input-row\"\n    }, React.createElement(\"label\", null, \"Email\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"email\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.email,\n      className: touched.email && errors.email ? \"has-error\" : null\n    }), React.createElement(Error, {\n      touched: touched.email,\n      message: errors.email\n    })), React.createElement(\"div\", {\n      className: \"input-row\"\n    }, React.createElement(\"label\", null, \"Country\"), React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested:\n      /*#__PURE__*/\n      function () {\n        var _ref4 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(_ref3) {\n          var value, response;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  value = _ref3.value;\n\n                  if (value) {\n                    _context.next = 4;\n                    break;\n                  }\n\n                  setSuggestions([]);\n                  return _context.abrupt(\"return\");\n\n                case 4:\n                  _context.prev = 4;\n                  _context.next = 7;\n                  return axios.get(\"https://restcountries.eu/rest/v2/name/\".concat(value));\n\n                case 7:\n                  response = _context.sent;\n                  setSuggestions(response.data.map(function (row) {\n                    return {\n                      name: row.name,\n                      flag: row.flag\n                    };\n                  }));\n                  _context.next = 14;\n                  break;\n\n                case 11:\n                  _context.prev = 11;\n                  _context.t0 = _context[\"catch\"](4);\n                  setSuggestions([]);\n\n                case 14:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[4, 11]]);\n        }));\n\n        return function (_x2) {\n          return _ref4.apply(this, arguments);\n        };\n      }(),\n      onSuggestionsClearRequested: function onSuggestionsClearRequested() {\n        setSuggestions([]);\n      },\n      getSuggestionValue: function getSuggestionValue(suggestion) {\n        return suggestion.name;\n      },\n      renderSuggestion: function renderSuggestion(suggestion) {\n        return React.createElement(\"div\", null, React.createElement(\"img\", {\n          src: suggestion.flag,\n          alt: suggestion.name,\n          style: {\n            width: \"25px\"\n          }\n        }), suggestion.name);\n      },\n      onSuggestionSelected: function onSuggestionSelected(event, _ref5) {\n        var suggestion = _ref5.suggestion,\n            method = _ref5.method;\n\n        if (method === \"enter\") {\n          event.preventDefault();\n        }\n\n        setCountry(suggestion.name);\n        setFieldValue(\"country\", suggestion.name);\n      },\n      inputProps: {\n        placeholder: \"Search for your country\",\n        autoComplete: \"abcd\",\n        value: country,\n        name: \"country\",\n        onChange: function onChange(_event, _ref6) {\n          var newValue = _ref6.newValue;\n          setCountry(newValue);\n        },\n        className: touched.country && errors.country ? \"has-error\" : null\n      }\n    }), React.createElement(Error, {\n      touched: touched.country,\n      message: errors.country\n    })), showPostalCode(values.country) ? React.createElement(\"div\", {\n      className: \"input-row\"\n    }, React.createElement(\"label\", null, postalCodeLabel(values.country)), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"postalCode\",\n      onChange: handleChange,\n      onBlur: handleBlur //value={values.postalCode}\n      ,\n      className: touched.postalCode && errors.postalCode ? \"has-error\" : null\n    }), React.createElement(Error, {\n      touched: touched.postalCode,\n      message: errors.postalCode\n    })) : null, React.createElement(\"div\", {\n      className: \"input-row\"\n    }, React.createElement(\"button\", {\n      type: \"submit\",\n      disabled: isSubmitting\n    }, \"Submit\")));\n  });\n}","map":{"version":3,"sources":["C:\\Users\\majed\\eclipse-workspace\\HopSpot\\testingRESTfulAPI\\components\\FormikForm.js"],"names":["React","Autosuggest","Formik","Yup","axios","Error","ValidationSchema","object","shape","name","string","min","max","required","country","email","isValidPostalCode","postalCode","postalCodeRegex","test","postalCodeLabel","postalCodeLabels","Canada","showPostalCode","includes","fetchAll","req","console","log","fetch","res","status","FormikForm","useState","setCountry","suggestions","setSuggestions","values","errors","setSubmitting","resetForm","headers","Headers","append","options","method","body","options_temp","Request","touched","handleChange","handleBlur","handleSubmit","isSubmitting","setFieldValue","value","get","response","data","map","row","flag","suggestion","width","event","preventDefault","placeholder","autoComplete","onChange","_event","newValue","className"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Autosuggest from \"react-autosuggest\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport axios from \"axios\";\r\nimport Error from \"./Error\";\r\n\r\nconst ValidationSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    .min(1, \"Too Short!\")\r\n    .max(255, \"Too Long!\")\r\n    .required(\"Required\"),\r\n  country: Yup.string()\r\n    .min(1, \"Too Short!\")\r\n    .max(255, \"Too Long!\")\r\n    .required(\"Required\"),\r\n  email: Yup.string()\r\n    .email(\"Must be an email address\")\r\n    .max(255, \"Too Long!\")\r\n    .required(\"Required\")\r\n});\r\n\r\nfunction isValidPostalCode(postalCode, country) {\r\n  let postalCodeRegex;\r\n\r\n  switch (country) {\r\n    case \"United States of America\":\r\n      postalCodeRegex = /^([0-9]{5})(?:[-\\s]*([0-9]{4}))?$/;\r\n      break;\r\n    case \"Canada\":\r\n      postalCodeRegex = /^([A-Z][0-9][A-Z])\\s*([0-9][A-Z][0-9])$/;\r\n      break;\r\n    default:\r\n      return true;\r\n  }\r\n  return postalCodeRegex.test(postalCode);\r\n}\r\n\r\nfunction postalCodeLabel(country) {\r\n  const postalCodeLabels = {\r\n    \"United States of America\": \"Zip Code\",\r\n    Canada: \"Postal Code\"\r\n  };\r\n  return postalCodeLabels[country] || \"Postal Code\";\r\n}\r\n\r\nfunction showPostalCode(country) {\r\n  return [\"United States of America\", \"Canada\"].includes(country);\r\n}\r\n\r\nasync function fetchAll(req){\r\n\tconsole.log(\"at fetchAll\");\r\n\t\r\n\tconst res = await fetch(req);\r\n\tconst status = await res.status;\r\n\t  \r\n\tif (res.status == 201){\r\n\t  \tconsole.log(\"Returned success from server side\");\r\n\t  \tres = await fetch('http://localhost:3000/users');\r\n\t  \tstatus = await res.status;\r\n\t  \t\r\n\t  \tif(status === 200) {\r\n\t  \t\t\r\n\t  \t\t\r\n\t  \t}\r\n\t}\r\n}\r\n\r\nexport default function FormikForm() {\r\n  const [country, setCountry] = React.useState(\"\");\r\n  const [suggestions, setSuggestions] = React.useState([]);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n        email: \"\",\r\n        country: \"\",\r\n        postalCode: \"\"\r\n      }}\r\n      validationSchema={ValidationSchema}\r\n      validate={values => {\r\n        let errors = {};\r\n\r\n        // Validate the Postal Code conditionally based on the chosen Country\r\n        if (!isValidPostalCode(values.postalCode, values.country)) {\r\n          errors.postalCode = `${postalCodeLabel(values.country)} invalid`;\r\n        }\r\n\r\n        return errors;\r\n      }}\r\n      onSubmit={(values, { setSubmitting, resetForm }) => {\r\n        setSubmitting(true);\r\n\r\n//        setTimeout(() => {\r\n//          alert(JSON.stringify(values, null, 2));\r\n//          resetForm();\r\n//          setCountry(\"\");\r\n//          setSubmitting(false);\r\n//        }, 500);\r\n        \r\n        const headers = new Headers();\r\n        headers.append('Content-type', 'application/json');\r\n        \r\n        const options = { \r\n        \tmethod: 'POST',\r\n        \theaders,\r\n        \tbody: JSON.stringify(values),\r\n        };\r\n        \r\n        const options_temp = { \r\n            \tmethod: 'GET',\r\n            \theaders,\r\n            };\r\n        \r\n        const req = new Request('http://localhost:3000/signup', options);\r\n        \r\n        this.fetchAll(req);\r\n\r\n        \r\n        \r\n      }}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        setFieldValue\r\n      }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <h2>A Great Form</h2>\r\n\r\n          <div className=\"input-row\">\r\n            <label>Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              //value={values.name}\r\n              className={touched.name && errors.name ? \"has-error\" : null}\r\n            />\r\n            <Error touched={touched.name} message={errors.name} />\r\n          </div>\r\n\r\n          <div className=\"input-row\">\r\n            <label>Email</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"email\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.email}\r\n              className={touched.email && errors.email ? \"has-error\" : null}\r\n            />\r\n            <Error touched={touched.email} message={errors.email} />\r\n          </div>\r\n\r\n          <div className=\"input-row\">\r\n            <label>Country</label>\r\n            <Autosuggest\r\n              suggestions={suggestions}\r\n              onSuggestionsFetchRequested={async ({ value }) => {\r\n                if (!value) {\r\n                  setSuggestions([]);\r\n                  return;\r\n                }\r\n\r\n                try {\r\n                  const response = await axios.get(\r\n                    `https://restcountries.eu/rest/v2/name/${value}`\r\n                  );\r\n\r\n                  setSuggestions(\r\n                    response.data.map(row => ({\r\n                      name: row.name,\r\n                      flag: row.flag\r\n                    }))\r\n                  );\r\n                } catch (e) {\r\n                  setSuggestions([]);\r\n                }\r\n              }}\r\n              onSuggestionsClearRequested={() => {\r\n                setSuggestions([]);\r\n              }}\r\n              getSuggestionValue={suggestion => suggestion.name}\r\n              renderSuggestion={suggestion => (\r\n                <div>\r\n                  <img\r\n                    src={suggestion.flag}\r\n                    alt={suggestion.name}\r\n                    style={{ width: \"25px\" }}\r\n                  />\r\n                  {suggestion.name}\r\n                </div>\r\n              )}\r\n              onSuggestionSelected={(event, { suggestion, method }) => {\r\n                if (method === \"enter\") {\r\n                  event.preventDefault();\r\n                }\r\n                setCountry(suggestion.name);\r\n                setFieldValue(\"country\", suggestion.name);\r\n              }}\r\n              inputProps={{\r\n                placeholder: \"Search for your country\",\r\n                autoComplete: \"abcd\",\r\n                value: country,\r\n                name: \"country\",\r\n                onChange: (_event, { newValue }) => {\r\n                  setCountry(newValue);\r\n                },\r\n                className:\r\n                  touched.country && errors.country ? \"has-error\" : null\r\n              }}\r\n            />\r\n            <Error touched={touched.country} message={errors.country} />\r\n          </div>\r\n\r\n          {showPostalCode(values.country) ? (\r\n            <div className=\"input-row\">\r\n              <label>{postalCodeLabel(values.country)}</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"postalCode\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                //value={values.postalCode}\r\n                className={\r\n                  touched.postalCode && errors.postalCode ? \"has-error\" : null\r\n                }\r\n              />\r\n              <Error touched={touched.postalCode} message={errors.postalCode} />\r\n            </div>\r\n          ) : null}\r\n\r\n          <div className=\"input-row\">\r\n            <button type=\"submit\" disabled={isSubmitting}>\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}