{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\majed\\\\Documents\\\\GitHub\\\\tempDataBase\\\\FekraLeSharika-Backup\\\\components\\\\searchBar.js\";\nimport React from \"react\";\nimport Autosuggest from \"react-autosuggest\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport Error from \"./Error\"; // const ValidationSchema = Yup.object().shape({\n//   password: Yup.string()\n//     .min(1, \"Too Short!\")\n//     .max(255, \"Too Long!\")\n//     .required(\"Required\"),\n//   email: Yup.string()\n//     .email(\"Must be an email address\")\n//     .max(255, \"Too Long!\")\n//     .required(\"Required\"),\n//     name: Yup.string()\n//     .min(1, \"Too Short!\")\n//     .max(255, \"Too Long!\")\n//     .required(\"Required\"),\n//     phone: Yup.string()\n//     .min(1, \"Too Short!\")\n//     .max(255, \"Too Long!\")\n//     .required(\"Required\")\n// });\n\nfunction userLogin(_x) {\n  return _userLogin.apply(this, arguments);\n}\n\nfunction _userLogin() {\n  _userLogin = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(req) {\n    var res, status;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log('Trying to login rn');\n            _context.next = 3;\n            return fetch(req);\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.status;\n\n          case 6:\n            status = _context.sent;\n\n            if (res.status === 200) {\n              console.log(\"success\"); //window.location.href = \"book\";\n            } else if (res.status === 409) {\n              console.log(\"Existing email\");\n              document.getElementById(\"input-row-email\").innerHTML = \"You are already registered, would you like to sign in\"; //window.location.href=\"map?varid=\" + encodeURIComponent(res.json);\n              //\treturn (<h2>wrong email or password</h2>);\n            } else if (res.status === 408) {\n              console.log(\"Existing phone number\");\n              document.getElementById(\"input-row-phone\").innerHTML = \"This phone number was already used\";\n            } else {\n              console.log(\"Other errors\"); //document.getElementById(\"input-row-password\").innerHTML = \"Other errors\";\n            } //\treturn (<h2>wrong email or password</h2>);\n\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _userLogin.apply(this, arguments);\n}\n\nfunction fetchAll(_x2) {\n  return _fetchAll.apply(this, arguments);\n}\n\nfunction _fetchAll() {\n  _fetchAll = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(req) {\n    var headers, options, res;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            headers = new Headers();\n            options = {\n              method: 'GET',\n              headers: headers,\n              mode: 'cors',\n              cache: 'default'\n            }; // const req = new Request('http://localhost:3000/users', options);\n\n            _context2.next = 4;\n            return fetch(req);\n\n          case 4:\n            res = _context2.sent;\n            _context2.next = 7;\n            return res.status;\n\n          case 7:\n            status = _context2.sent;\n\n            if (status === 200) {\n              console.log('successful login');\n            }\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fetchAll.apply(this, arguments);\n}\n\nexport default function SearchBar() {\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      country = _React$useState2[0],\n      setCountry = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      suggestions = _React$useState4[0],\n      setSuggestions = _React$useState4[1];\n\n  return React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\",\n      name: \"\",\n      phone: \"\"\n    } //   validationSchema={ValidationSchema}\n    //   validate={values => {\n    //     let errors = {};\n    //     return errors;\n    //   }}\n    ,\n    onSubmit: function onSubmit(values, _ref) {\n      var setSubmitting = _ref.setSubmitting,\n          resetForm = _ref.resetForm;\n      setSubmitting(true);\n      console.log(_JSON$stringify(values, null, 2));\n      var headers = new Headers();\n      headers.append('Content-type', 'application/json');\n      var options = {\n        method: 'POST',\n        headers: headers,\n        body: _JSON$stringify(values)\n      };\n      var req = new Request('http://localhost:3000/users/signup', options);\n      setTimeout(function () {\n        userLogin(req);\n        resetForm();\n        setCountry(\"\");\n        setSubmitting(false);\n      }, 500);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, function (_ref2) {\n    var values = _ref2.values,\n        errors = _ref2.errors,\n        touched = _ref2.touched,\n        handleChange = _ref2.handleChange,\n        handleBlur = _ref2.handleBlur,\n        handleSubmit = _ref2.handleSubmit,\n        isSubmitting = _ref2.isSubmitting,\n        setFieldValue = _ref2.setFieldValue;\n    return React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"column is-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"field has-addons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"control has-icons-left is-expanded\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"input is-info\",\n      name: \"name\",\n      type: \"text\",\n      placeholder: \"Search up our resources\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      className: \"control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"button\",\n      type: \"submit\",\n      disabled: isSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Search\")))));\n  });\n} // is-offset-one-fifth","map":{"version":3,"sources":["C:\\Users\\majed\\Documents\\GitHub\\tempDataBase\\FekraLeSharika-Backup\\components\\searchBar.js"],"names":["React","Autosuggest","Formik","Yup","axios","Error","userLogin","req","console","log","fetch","res","status","document","getElementById","innerHTML","fetchAll","headers","Headers","options","method","mode","cache","SearchBar","useState","country","setCountry","suggestions","setSuggestions","email","password","name","phone","values","setSubmitting","resetForm","append","body","Request","setTimeout","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","setFieldValue"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\n\r\nimport Autosuggest from \"react-autosuggest\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport axios from \"axios\";\r\nimport Error from \"./Error\";\r\n\r\n\r\n// const ValidationSchema = Yup.object().shape({\r\n//   password: Yup.string()\r\n//     .min(1, \"Too Short!\")\r\n//     .max(255, \"Too Long!\")\r\n//     .required(\"Required\"),\r\n//   email: Yup.string()\r\n//     .email(\"Must be an email address\")\r\n//     .max(255, \"Too Long!\")\r\n//     .required(\"Required\"),\r\n//     name: Yup.string()\r\n//     .min(1, \"Too Short!\")\r\n//     .max(255, \"Too Long!\")\r\n//     .required(\"Required\"),\r\n//     phone: Yup.string()\r\n//     .min(1, \"Too Short!\")\r\n//     .max(255, \"Too Long!\")\r\n//     .required(\"Required\")\r\n// });\r\n\r\nasync function userLogin(req) {\r\n  \tconsole.log('Trying to login rn');\r\n\t\r\n\tconst res = await fetch(req);\r\n\t\r\n\tconst status = await res.status;\r\n\t\r\n\tif (res.status === 200) {\r\n\t\tconsole.log(\"success\");\r\n\t\t\r\n\t\t//window.location.href = \"book\";\r\n\r\n\t\t\r\n\t} else if (res.status === 409) {\r\n\tconsole.log(\"Existing email\");\r\n\t\r\n\t   \tdocument.getElementById(\"input-row-email\").innerHTML = \"You are already registered, would you like to sign in\";\r\n\t\t//window.location.href=\"map?varid=\" + encodeURIComponent(res.json);\r\n\t//\treturn (<h2>wrong email or password</h2>);\r\n\t} else if (res.status === 408){\r\n\t\tconsole.log(\"Existing phone number\");\r\n\t\t   \tdocument.getElementById(\"input-row-phone\").innerHTML = \"This phone number was already used\";\r\n\t} else {\r\n\t\tconsole.log(\"Other errors\");\r\n\t\t   \t//document.getElementById(\"input-row-password\").innerHTML = \"Other errors\";\r\n\t}\r\n\r\n\t//\treturn (<h2>wrong email or password</h2>);\r\n\t\r\n}\r\n\r\nasync function fetchAll(req){\r\n\r\n\r\n\tconst headers = new Headers();\r\n\t\r\n    const options = { \r\n    \tmethod: 'GET',\r\n\t    headers: headers,\r\n\t    mode: 'cors',\r\n\t    cache: 'default'\t\r\n    };\r\n        \r\n   // const req = new Request('http://localhost:3000/users', options);\r\n        \r\n    const res = await fetch(req);\r\n  \tstatus = await res.status;\r\n  \t\r\n  \tif(status === 200) {\r\n  \t\tconsole.log('successful login');\r\n  \t\t\r\n  \t}\r\n  \t\r\n}\r\n\r\nexport default function SearchBar() {\r\n  const [country, setCountry] = React.useState(\"\");\r\n  const [suggestions, setSuggestions] = React.useState([]);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        email: \"\",\r\n        password: \"\",\r\n        name: \"\",\r\n        phone: \"\",\r\n      }}\r\n    //   validationSchema={ValidationSchema}\r\n    //   validate={values => {\r\n    //     let errors = {};\r\n\r\n    //     return errors;\r\n    //   }}\r\n      onSubmit={(values, { setSubmitting, resetForm }) => {\r\n        setSubmitting(true);\r\n\r\n        console.log(JSON.stringify(values, null, 2));\r\n\r\n        \r\n        const headers = new Headers();\r\n        headers.append('Content-type', 'application/json');\r\n        \r\n        const options = { \r\n        \tmethod: 'POST',\r\n        \theaders,\r\n        \tbody: JSON.stringify(values),\r\n        };\r\n        \r\n        const req = new Request('http://localhost:3000/users/signup', options);\r\n        \r\n        \r\n      setTimeout(() => {\r\n          userLogin(req);\r\n\t      resetForm();\r\n\t      setCountry(\"\");\r\n\t      setSubmitting(false);\r\n\t   }, 500);\r\n        \r\n      }}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        setFieldValue\r\n      }) => ( \r\n        <form onSubmit={handleSubmit}>\r\n            <div className = \"column is-6\">\r\n                <div className = \"field has-addons\">\r\n                    <p className = \"control has-icons-left is-expanded\">\r\n                        <input \r\n                            className = \"input is-info\" \r\n                            name = \"name\"\r\n                            type = \"text\" \r\n                            placeholder = \"Search up our resources\" \r\n                            onChange = {handleChange}\r\n                            onBlur = {handleBlur}\r\n                            value = {values.name}\r\n                        />    \r\n                    </p>\r\n\r\n                    <p className  = \"control\">\r\n                        <a className=\"button\" type=\"submit\" disabled={isSubmitting}>\r\n                            Search\r\n                        </a>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n\r\n// is-offset-one-fifth\r\n\r\n"]},"metadata":{},"sourceType":"module"}