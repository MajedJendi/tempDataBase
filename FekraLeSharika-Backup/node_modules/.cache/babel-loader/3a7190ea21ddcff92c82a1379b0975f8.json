{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\n// issues:\n// only searches for one charachter and ignores and keeps erasing everytime\n// Input doesnt show\n// maybe try to make the SearchBar component work?\n// Imports\nimport React, { Component } from 'react';\nimport Autocomplete from 'react-google-autocomplete'; // Import Search Bar Components\n//import SearchBar from 'material-ui-search-bar';\n// Import React Scrit Libraray to load Google object\n\nimport Script from 'react-load-script';\n\nvar Search =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Search, _Component);\n\n  // Define Constructor\n  function Search(props) {\n    var _this;\n\n    _classCallCheck(this, Search);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Search).call(this, props)); // Declare State\n\n    _this.state = {\n      city: '',\n      query: ''\n    }; // Bind Functions\n\n    _this.handleScriptLoad = _this.handleScriptLoad.bind(_assertThisInitialized(_this));\n    _this.handlePlaceSelect = _this.handlePlaceSelect.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Search, [{\n    key: \"handleScriptLoad\",\n    value: function handleScriptLoad() {\n      console.log(\"at handleScript\"); // Declare Options For Autocomplete\n\n      var options = {\n        types: ['(cities)']\n      };\n      console.log(\"input: \" + document.getElementById('autocomplete')); // Initialize Google Autocomplete\n\n      /*global google*/\n      // To disable any eslint 'google not defined' errors\n\n      this.autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete')); //      options,\n      //    \n      // Avoid paying for data that you don't need by restricting the set of\n      // place fields that are returned to just the address components and formatted\n      // address.\n\n      this.autocomplete.setFields(['address_components', 'formatted_address']); // Fire Event when a suggested name is selected\n\n      this.autocomplete.addListener('place_changed', this.handlePlaceSelect);\n    }\n  }, {\n    key: \"handlePlaceSelect\",\n    value: function handlePlaceSelect() {\n      // Extract City From Address Object\n      var addressObject = this.autocomplete.getPlace();\n      var address = addressObject.address_components;\n      console.log(address); // Check if address is valid\n\n      if (address) {\n        // Set State\n        this.setState({\n          city: address[0].long_name,\n          query: addressObject.formatted_address\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", null, React.createElement(Script, {\n        url: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBGMpj3dv6hZUWLDEAoI3vlfnKMTG8ugIE&libraries=places\",\n        onLoad: this.handleScriptLoad\n      }), React.createElement(\"input\", {\n        type: \"search\",\n        id: \"autocomplete\",\n        placeholder: \"Enter your parking address\",\n        value: this.state.value,\n        style: {\n          width: '100%',\n          height: '40px',\n          paddingLeft: '16px',\n          marginTop: '2px',\n          marginBottom: '100px'\n        }\n      }), React.createElement(\"div\", {\n        className: \"input-row\"\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        onClick: updateUserinfo\n      }, \"Submit\")));\n    }\n  }]);\n\n  return Search;\n}(Component);\n\nfunction updateUserinfo() {\n  return _updateUserinfo.apply(this, arguments);\n}\n\nfunction _updateUserinfo() {\n  _updateUserinfo = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"Here\");\n            console.log(document.getElementById(\"autocomplete\").value);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _updateUserinfo.apply(this, arguments);\n}\n\nexport default Search;","map":{"version":3,"sources":["C:\\Users\\majed\\eclipse-workspace\\HopSpot\\testingRESTfulAPI\\components\\map2.js"],"names":["React","Component","Autocomplete","Script","Search","props","state","city","query","handleScriptLoad","bind","handlePlaceSelect","console","log","options","types","document","getElementById","autocomplete","google","maps","places","setFields","addListener","addressObject","getPlace","address","address_components","setState","long_name","formatted_address","value","width","height","paddingLeft","marginTop","marginBottom","updateUserinfo"],"mappings":"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","sourcesContent":["// issues:\r\n// only searches for one charachter and ignores and keeps erasing everytime\r\n// Input doesnt show\r\n// maybe try to make the SearchBar component work?\r\n\r\n\r\n\r\n\r\n// Imports\r\nimport React, { Component } from 'react';\r\nimport Autocomplete from 'react-google-autocomplete';\r\n\r\n// Import Search Bar Components\r\n//import SearchBar from 'material-ui-search-bar';\r\n\r\n// Import React Scrit Libraray to load Google object\r\nimport Script from 'react-load-script';\r\n\r\nclass Search extends Component {\r\n  // Define Constructor\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Declare State\r\n    this.state = {\r\n      city: '',\r\n      query: ''\r\n    };\r\n\r\n    // Bind Functions\r\n    this.handleScriptLoad = this.handleScriptLoad.bind(this);\r\n    this.handlePlaceSelect = this.handlePlaceSelect.bind(this);\r\n\r\n  }\r\n\r\n  handleScriptLoad() {\r\n\t  console.log(\"at handleScript\");\r\n    // Declare Options For Autocomplete\r\n    var options = {\r\n      types: ['(cities)'],\r\n    };\r\n\r\n\t  console.log(\"input: \" + document.getElementById('autocomplete'));\r\n\r\n    // Initialize Google Autocomplete\r\n    /*global google*/ // To disable any eslint 'google not defined' errors\r\n    this.autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'));\r\n//      options,\r\n//    \r\n\r\n    // Avoid paying for data that you don't need by restricting the set of\r\n    // place fields that are returned to just the address components and formatted\r\n    // address.\r\n    this.autocomplete.setFields(['address_components', 'formatted_address']);\r\n\r\n    // Fire Event when a suggested name is selected\r\n    this.autocomplete.addListener('place_changed', this.handlePlaceSelect);\r\n  }\r\n  \r\n  handlePlaceSelect() {\r\n\t  \r\n    // Extract City From Address Object\r\n\tlet addressObject = this.autocomplete.getPlace();\r\n    let address = addressObject.address_components;\r\n    \r\n    console.log(address);\r\n    // Check if address is valid\r\n    if (address) {\r\n      // Set State\r\n      this.setState(\r\n        {\r\n          city: address[0].long_name,\r\n          query: addressObject.formatted_address,\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Script\r\n          url=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBGMpj3dv6hZUWLDEAoI3vlfnKMTG8ugIE&libraries=places\"\r\n          onLoad={this.handleScriptLoad}\r\n        />\r\n        <input type=\"search\" id=\"autocomplete\" placeholder=\"Enter your parking address\" value={this.state.value}\r\n\t        style={{\r\n\t            width: '100%',\r\n\t            height: '40px',\r\n\t            paddingLeft: '16px',\r\n\t            marginTop: '2px',\r\n\t            marginBottom: '100px'\r\n\t           }}\r\n        />\r\n        \r\n        \r\n        <div className=\"input-row\">\r\n\t        <button type=\"submit\" onClick={updateUserinfo}>\r\n\t          Submit\r\n\t        </button>\r\n\t    </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nasync function updateUserinfo(){\r\n\tconsole.log(\"Here\");\r\n\tconsole.log(document.getElementById(\"autocomplete\").value);\r\n\t\r\n}\r\n\r\nexport default Search;"]},"metadata":{},"sourceType":"module"}